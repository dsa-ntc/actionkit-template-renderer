# Generated by Django 3.2.6 on 2024-02-08 01:59

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdhocSpamCheckLog',
            fields=[
                ('action_id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('result', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'adhoc_spamchecklog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AxesAccessAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_agent', models.CharField(max_length=255)),
                ('ip_address', models.CharField(blank=True, max_length=39, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('http_accept', models.CharField(max_length=1025)),
                ('path_info', models.CharField(max_length=255)),
                ('attempt_time', models.DateTimeField()),
                ('get_data', models.TextField()),
                ('post_data', models.TextField()),
                ('failures_since_start', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'axes_accessattempt',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AxesAccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_agent', models.CharField(max_length=255)),
                ('ip_address', models.CharField(blank=True, max_length=39, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('http_accept', models.CharField(max_length=1025)),
                ('path_info', models.CharField(max_length=255)),
                ('attempt_time', models.DateTimeField()),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'axes_accesslog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Cache',
            fields=[
                ('cache_key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.TextField()),
                ('expires', models.DateTimeField()),
            ],
            options={
                'db_table': 'cache',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsAllowedTemplatesetField',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('order_index', models.IntegerField()),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('always_show', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('field_default', models.TextField()),
                ('field_choices', models.TextField()),
                ('field_regex', models.TextField()),
                ('field_type', models.CharField(max_length=32)),
                ('field_length', models.IntegerField(blank=True, null=True)),
                ('required', models.IntegerField()),
                ('allow_multiple', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_allowedtemplatesetfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsGithubWebhookSecret',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'cms_githubwebhooksecret',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsSurveyForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('introduction_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'cms_survey_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsTemplateCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('code_hash', models.CharField(max_length=64)),
                ('code', models.TextField()),
            ],
            options={
                'db_table': 'cms_templatecode',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsTemplateset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('editable', models.IntegerField()),
                ('hidden', models.IntegerField()),
                ('is_default', models.IntegerField(blank=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cms_templateset',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsUploadedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('bucket', models.CharField(max_length=255)),
                ('directory', models.CharField(max_length=255)),
                ('filename', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=255, unique=True)),
                ('etag', models.CharField(max_length=255)),
                ('size', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cms_uploadedfile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('link', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(max_length=255)),
                ('opq_id', models.CharField(max_length=255)),
                ('created_user', models.IntegerField()),
                ('subscribed_user', models.IntegerField()),
                ('status', models.CharField(max_length=255)),
                ('taf_emails_sent', models.IntegerField(blank=True, null=True)),
                ('is_forwarded', models.IntegerField()),
                ('ip_address', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'db_table': 'core_action',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAdminEditors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visual_default', models.CharField(max_length=16)),
                ('template_default', models.CharField(max_length=16)),
                ('turn_off_visual', models.IntegerField()),
                ('bee_editor_enabled', models.IntegerField()),
                ('bee_collaborative_editing_enabled', models.IntegerField()),
            ],
            options={
                'db_table': 'core_admineditors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAdminNoticeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255)),
                ('notice_type', models.CharField(blank=True, max_length=255, null=True)),
                ('object_type', models.CharField(max_length=40)),
                ('object_id', models.IntegerField()),
                ('subject', models.TextField(blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_adminnoticelog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAllowedEmailWrapperField',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('order_index', models.IntegerField()),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('always_show', models.IntegerField()),
                ('required', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('field_type', models.CharField(max_length=32)),
                ('field_default', models.TextField()),
                ('field_choices', models.TextField()),
                ('field_regex', models.TextField()),
                ('field_length', models.IntegerField(blank=True, null=True)),
                ('allow_multiple', models.IntegerField()),
            ],
            options={
                'db_table': 'core_allowedemailwrapperfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAllowedMailingField',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('always_show', models.IntegerField()),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('order_index', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('field_default', models.TextField()),
                ('field_choices', models.TextField()),
                ('field_regex', models.TextField()),
                ('field_type', models.CharField(max_length=32)),
                ('field_length', models.IntegerField(blank=True, null=True)),
                ('required', models.IntegerField()),
                ('allow_multiple', models.IntegerField()),
            ],
            options={
                'db_table': 'core_allowedmailingfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAllowedPageField',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('hidden', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('always_show', models.IntegerField()),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('order_index', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('field_default', models.TextField()),
                ('field_choices', models.TextField()),
                ('field_regex', models.TextField()),
                ('field_type', models.CharField(max_length=32)),
                ('field_length', models.IntegerField(blank=True, null=True)),
                ('required', models.IntegerField()),
                ('allow_multiple', models.IntegerField()),
            ],
            options={
                'db_table': 'core_allowedpagefield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAllowedUserField',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('hidden', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('always_show', models.IntegerField()),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('order_index', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('field_default', models.TextField()),
                ('field_choices', models.TextField()),
                ('field_regex', models.TextField()),
                ('field_type', models.CharField(max_length=32)),
                ('field_length', models.IntegerField(blank=True, null=True)),
                ('required', models.IntegerField()),
                ('allow_multiple', models.IntegerField()),
            ],
            options={
                'db_table': 'core_alloweduserfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAmpTap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('useragent_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_amptap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAuthnetTransactionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('source', models.CharField(max_length=255)),
                ('raw', models.TextField()),
                ('processed', models.IntegerField()),
            ],
            options={
                'db_table': 'core_authnettransactionlog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBlackholedDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('domain', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'core_blackholeddomain',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBlackholedEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'core_blackholedemail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBlackholedHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('action_id', models.IntegerField(blank=True, null=True)),
                ('matched_email', models.IntegerField()),
                ('matched_domain', models.IntegerField()),
                ('matched_pattern', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_blackholedhistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBlackholedPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('pattern', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'core_blackholedpattern',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBounceState',
            fields=[
                ('bounce_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'core_bounce_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBoundaryGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_boundarygroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreBuiltinTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('iso_code', models.CharField(max_length=10)),
                ('translations', models.TextField()),
            ],
            options={
                'db_table': 'core_builtintranslation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCandidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('fec_id', models.CharField(blank=True, max_length=16, null=True, unique=True)),
                ('portrait_url', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('status', models.CharField(max_length=255)),
                ('is_ours', models.IntegerField()),
            ],
            options={
                'db_table': 'core_candidate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreClick',
            fields=[
                ('clickurl_id', models.IntegerField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('link_number', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('referring_user_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('useragent_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_click',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreClickRaw',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('clickurl_id', models.IntegerField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('link_number', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('referring_user_id', models.IntegerField(blank=True, null=True)),
                ('useragent_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_click_raw',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreClickUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_clickurl',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreClientDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('domain', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'core_clientdomain',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreConfirmationMailingBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('confirmation_mailing_id', models.IntegerField()),
                ('action_id', models.IntegerField()),
                ('body', models.TextField()),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_confirmationmailingbody',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDefaultExcludeQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_defaultexcludequery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duplicate_window', models.IntegerField(blank=True, null=True)),
                ('send_ip_address', models.IntegerField()),
            ],
            options={
                'db_table': 'core_donationconfiguration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationFraudFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('check_maxmind', models.IntegerField()),
                ('maxmind_threshold', models.IntegerField()),
                ('whitelist_where', models.TextField()),
                ('blacklist_where', models.TextField()),
                ('is_default_for_mailings', models.IntegerField()),
                ('is_default_for_web', models.IntegerField()),
                ('message', models.TextField()),
            ],
            options={
                'db_table': 'core_donationfraudfilter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationHpcRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('hidden', models.IntegerField()),
                ('which_amount', models.CharField(max_length=255)),
                ('timespan', models.CharField(max_length=255)),
                ('currency', models.CharField(max_length=3)),
            ],
            options={
                'db_table': 'core_donation_hpc_rule',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEmailWrapper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('template', models.TextField()),
                ('text_template', models.TextField()),
                ('hidden', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('unsubscribe_text', models.TextField(blank=True, null=True)),
                ('unsubscribe_html', models.TextField(blank=True, null=True)),
                ('is_default', models.IntegerField(blank=True, null=True)),
                ('amp_template', models.TextField(blank=True, null=True)),
                ('unsubscribe_amp_html', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_emailwrapper',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEngagementQueryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_engagementqueryreport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionAccountMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('account', models.CharField(max_length=255, unique=True)),
                ('designation_name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_everyactionaccountmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionApiLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('method', models.CharField(max_length=255)),
                ('filename', models.CharField(max_length=255)),
                ('line', models.IntegerField()),
            ],
            options={
                'db_table': 'core_everyactionapilog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionBulkMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('result_name', models.CharField(max_length=255)),
                ('readonly', models.IntegerField()),
                ('sync', models.CharField(max_length=255)),
                ('hidden', models.IntegerField()),
                ('virtual', models.IntegerField()),
                ('direction', models.CharField(max_length=8)),
            ],
            options={
                'db_table': 'core_everyactionbulkmapping',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('last_ak_user_id', models.IntegerField(blank=True, null=True)),
                ('last_ak_action_id', models.IntegerField(blank=True, null=True)),
                ('last_ak_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_ea_contacts', models.IntegerField()),
                ('updated_ea_contacts', models.IntegerField()),
                ('failed_ea_contacts', models.IntegerField()),
                ('created_ea_contributions', models.IntegerField()),
                ('updated_ea_contributions', models.IntegerField()),
                ('failed_ea_contributions', models.IntegerField()),
                ('status', models.CharField(max_length=20)),
                ('error', models.TextField(blank=True, null=True)),
                ('last_ak_uf_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_ak_users', models.IntegerField()),
                ('updated_ak_users', models.IntegerField()),
                ('failed_ak_users', models.IntegerField()),
                ('last_ea_contact_update', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_everyactionlog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreFacebookApp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_id', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_facebookapp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreFaxAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255)),
                ('from_email', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_faxaccount',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'core_formfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreFromLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_line', models.TextField(blank=True, null=True)),
                ('hidden', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_default', models.IntegerField()),
            ],
            options={
                'db_table': 'core_fromline',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreGoogleAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_googleanalytics',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreGoogleOauthCredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('staff_user_id', models.IntegerField()),
                ('credentials', models.TextField()),
                ('email', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_googleoauthcredentials',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreHistoricalSalesforceFieldMap',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ak_field', models.CharField(max_length=255)),
                ('sf_field', models.CharField(max_length=255)),
                ('readonly', models.IntegerField(blank=True, null=True)),
                ('direction', models.CharField(max_length=255)),
                ('history_id', models.IntegerField()),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('history_type', models.CharField(max_length=1)),
                ('history_user_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_historicalsalesforcefieldmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreHistoricalSalesforceOrderFieldMap',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ak_field', models.CharField(max_length=255)),
                ('ak_literal', models.CharField(max_length=255)),
                ('sf_field', models.CharField(max_length=255)),
                ('sf_literal', models.CharField(max_length=255)),
                ('readonly', models.IntegerField(blank=True, null=True)),
                ('builtin', models.IntegerField(blank=True, null=True)),
                ('direction', models.CharField(max_length=255)),
                ('history_id', models.IntegerField()),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('history_type', models.CharField(max_length=1)),
                ('history_user_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_historicalsalesforceorderfieldmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreHistoricalSalesforceRecurringOrderFieldMap',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ak_field', models.CharField(max_length=255)),
                ('ak_literal', models.CharField(max_length=255)),
                ('sf_field', models.CharField(max_length=255)),
                ('sf_literal', models.CharField(max_length=255)),
                ('readonly', models.IntegerField(blank=True, null=True)),
                ('builtin', models.IntegerField(blank=True, null=True)),
                ('direction', models.CharField(max_length=255)),
                ('history_id', models.IntegerField()),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('history_type', models.CharField(max_length=1)),
                ('history_user_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_historicalsalesforcerecurringorderfieldmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreHostingPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('after_basics_redirect_url', models.CharField(max_length=255)),
                ('after_basics_redirect_name', models.CharField(max_length=255)),
                ('end_redirect_url', models.CharField(max_length=255)),
                ('end_redirect_name', models.CharField(max_length=255)),
                ('after_action_redirect_url', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_hostingplatform',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreImmediateDeliveryWarning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_immediatedeliverywarning',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreInconsistentTransactions',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=255)),
                ('order_id', models.IntegerField()),
                ('account', models.CharField(max_length=255)),
                ('test_mode', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('success', models.IntegerField()),
                ('trans_id', models.CharField(blank=True, max_length=255, null=True)),
                ('failure_description', models.CharField(max_length=255)),
                ('failure_code', models.CharField(blank=True, max_length=255, null=True)),
                ('failure_message', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_inconsistent_transactions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('job_type', models.CharField(max_length=255)),
                ('priority', models.IntegerField(blank=True, null=True)),
                ('parameters', models.TextField(blank=True, null=True)),
                ('result_data', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('server', models.CharField(blank=True, max_length=255, null=True)),
                ('pid', models.IntegerField(blank=True, null=True)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('progress', models.IntegerField(blank=True, null=True)),
                ('goal', models.IntegerField(blank=True, null=True)),
                ('estimated_finish_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('django_version', models.CharField(blank=True, max_length=255, null=True)),
                ('polled_at', models.DateTimeField(blank=True, null=True)),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_job',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('translations', models.TextField()),
                ('hidden', models.IntegerField()),
                ('iso_code', models.CharField(blank=True, max_length=10, null=True)),
                ('inherit_from_id', models.IntegerField(blank=True, null=True)),
                ('ordering', models.IntegerField(blank=True, null=True)),
                ('is_default', models.IntegerField()),
            ],
            options={
                'db_table': 'core_language',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('hidden', models.IntegerField()),
                ('is_default', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_list',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailboxProviderActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('criteria', models.JSONField()),
                ('description', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=16)),
                ('hidden', models.IntegerField()),
            ],
            options={
                'db_table': 'core_mailboxprovideractivity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('custom_fromline', models.TextField(blank=True, null=True)),
                ('reply_to', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('html', models.TextField(blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('web_viewable', models.IntegerField(blank=True, null=True)),
                ('requested_proofs', models.IntegerField(blank=True, null=True)),
                ('queue_task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('queued_at', models.DateTimeField(blank=True, null=True)),
                ('expected_send_count', models.IntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('query_queued_at', models.DateTimeField(blank=True, null=True)),
                ('query_started_at', models.DateTimeField(blank=True, null=True)),
                ('query_completed_at', models.DateTimeField(blank=True, null=True)),
                ('query_previous_runtime', models.IntegerField(blank=True, null=True)),
                ('query_status', models.CharField(blank=True, max_length=255, null=True)),
                ('query_task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('targeting_version', models.IntegerField(blank=True, null=True)),
                ('targeting_version_saved', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('limit', models.IntegerField(blank=True, null=True)),
                ('sort_by', models.CharField(blank=True, max_length=32, null=True)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('progress', models.IntegerField(blank=True, null=True)),
                ('pid', models.IntegerField(blank=True, null=True)),
                ('hidden', models.IntegerField()),
                ('target_group_from_landing_page', models.IntegerField()),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('sent_proofs', models.IntegerField()),
                ('rebuild_query_at_send', models.IntegerField()),
                ('limit_percent', models.IntegerField(blank=True, null=True)),
                ('target_mergefile', models.IntegerField()),
                ('mails_per_second', models.FloatField(blank=True, null=True)),
                ('requested_proof_date', models.DateTimeField(blank=True, null=True)),
                ('send_date', models.CharField(max_length=255)),
                ('exclude_ordering', models.IntegerField(blank=True, null=True)),
                ('test_remainder', models.IntegerField(blank=True, null=True)),
                ('target_mergequery', models.IntegerField()),
                ('send_time_source', models.CharField(blank=True, max_length=64, null=True)),
                ('version', models.SmallIntegerField()),
                ('archive', models.TextField(blank=True, null=True)),
                ('use_autotest', models.IntegerField()),
                ('autotest_status', models.CharField(blank=True, max_length=255, null=True)),
                ('autotest_wait_minutes', models.IntegerField(blank=True, null=True)),
                ('autotest_metric', models.CharField(blank=True, max_length=32, null=True)),
                ('autotest_max_unsub_rate', models.FloatField(blank=True, null=True)),
                ('send_time_local', models.DateTimeField(blank=True, null=True)),
                ('send_time_local_fallback', models.DateTimeField(blank=True, null=True)),
                ('amp_html', models.TextField(blank=True, null=True)),
                ('send_time_local_no_fallback', models.IntegerField(blank=True, null=True)),
                ('bee_json', models.TextField()),
                ('bee_session', models.CharField(blank=True, max_length=36, null=True)),
                ('amp_archive', models.TextField(blank=True, null=True)),
                ('autotest_resend', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_autotest_resend', to='mydsa.coremailing')),
                ('emailwrapper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreemailwrapper')),
            ],
            options={
                'db_table': 'core_mailing',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingHaiku',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('text', models.TextField()),
            ],
            options={
                'db_table': 'core_mailinghaiku',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingsConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_auto_excludes', models.IntegerField()),
                ('send_date_default', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_mailingsconfig',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17638',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17638',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17725',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17725',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17726',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17726',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17727',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17727',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17728',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17728',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17729',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17729',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17730',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17730',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17731',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17731',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17732',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17732',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17733',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17733',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17734',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17734',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17735',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17735',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17736',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17736',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17737',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17737',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17738',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17738',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17739',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17739',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17740',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17740',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17741',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17741',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17742',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17742',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17743',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17743',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17744',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17744',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17745',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17745',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17746',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17746',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17747',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17747',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17748',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17748',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17749',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17749',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17750',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17750',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17751',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17751',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17752',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17752',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17753',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17753',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17754',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17754',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17755',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17755',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17756',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17756',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17757',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17757',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17758',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17758',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17759',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17759',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17760',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17760',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17761',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17761',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17762',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17762',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17763',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17763',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17764',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17764',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17765',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17765',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17855',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17855',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17856',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17856',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17857',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17857',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17858',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17858',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17859',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17859',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17860',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17860',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingset17861',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'core_mailingset_17861',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('text', models.TextField(blank=True, null=True)),
                ('preview_text', models.TextField(blank=True, null=True)),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'core_mailingsubject',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('states', models.TextField(blank=True, null=True)),
                ('cds', models.TextField(blank=True, null=True)),
                ('zips', models.TextField(blank=True, null=True)),
                ('zip_radius', models.IntegerField(blank=True, null=True)),
                ('has_donated', models.IntegerField(blank=True, null=True)),
                ('is_monthly_donor', models.IntegerField(blank=True, null=True)),
                ('raw_sql', models.TextField(blank=True, null=True)),
                ('state_house_districts', models.TextField(blank=True, null=True)),
                ('state_senate_districts', models.TextField(blank=True, null=True)),
                ('is_delivery', models.IntegerField(blank=True, null=True)),
                ('counties', models.TextField(blank=True, null=True)),
                ('campaign_radius', models.IntegerField(blank=True, null=True)),
                ('countries', models.TextField(blank=True, null=True)),
                ('divisions', models.TextField(blank=True, null=True)),
                ('campaign_samestate_only', models.IntegerField()),
                ('mirror_mailing_excludes', models.IntegerField()),
                ('regions', models.TextField(blank=True, null=True)),
                ('campaign_same_district_only', models.IntegerField()),
                ('campaign_first_date', models.CharField(blank=True, max_length=16, null=True)),
                ('campaign_last_date', models.CharField(blank=True, max_length=16, null=True)),
                ('campaign_same_county_only', models.IntegerField()),
                ('scorepool_score_min', models.IntegerField(blank=True, null=True)),
                ('scorepool_score_max', models.IntegerField(blank=True, null=True)),
                ('scorepool_score_include_missing', models.IntegerField()),
            ],
            options={
                'db_table': 'core_mailingtargeting',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTestGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('title', models.TextField(blank=True, null=True)),
                ('prime', models.IntegerField()),
                ('number_of_mailings', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_mailingtestgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('letter', models.CharField(max_length=2)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('archive', models.TextField(blank=True, null=True)),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'core_mailingvariation',
                'managed': True,
                'unique_together': {('mailing', 'letter')},
            },
        ),
        migrations.CreateModel(
            name='CoreMediaTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('us_district', models.CharField(max_length=5)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('orgid', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('fax', models.CharField(blank=True, max_length=255, null=True)),
                ('email_address', models.CharField(blank=True, max_length=255, null=True)),
                ('website_url', models.CharField(blank=True, max_length=255, null=True)),
                ('circulation', models.IntegerField(blank=True, null=True)),
                ('frequency', models.CharField(blank=True, max_length=36, null=True)),
                ('language', models.CharField(blank=True, max_length=64, null=True)),
                ('levelcode', models.CharField(blank=True, max_length=64, null=True)),
                ('dmacode', models.CharField(blank=True, max_length=10, null=True)),
                ('fipscode', models.IntegerField(blank=True, null=True)),
                ('msacode', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_mediatarget',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMergeFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('lookup_table', models.CharField(blank=True, max_length=255, null=True)),
                ('lookup_column', models.CharField(blank=True, max_length=255, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('row_count', models.IntegerField(blank=True, null=True)),
                ('line_count', models.IntegerField(blank=True, null=True)),
                ('error', models.TextField()),
                ('s3_bucket', models.CharField(max_length=255)),
                ('s3_key', models.CharField(max_length=255)),
                ('filename', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_mergefile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMultilingualCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'core_multilingualcampaign',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('title', models.TextField()),
                ('message', models.TextField()),
                ('type', models.CharField(max_length=10)),
                ('url', models.TextField()),
                ('tag', models.CharField(max_length=255)),
                ('expiration', models.DateTimeField(blank=True, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='notice_creator', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_notice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreOpen',
            fields=[
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('useragent_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_open',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=3)),
                ('total_converted', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(max_length=255)),
                ('card_num_last_four', models.CharField(blank=True, max_length=4, null=True)),
                ('import_id', models.CharField(blank=True, max_length=64, null=True)),
                ('account', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_method', models.CharField(max_length=255)),
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_order',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreOrderShippingAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_order_shipping_address',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreOrderUserDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_order_user_detail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('title', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('goal', models.IntegerField(blank=True, null=True)),
                ('goal_type', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
                ('hidden', models.IntegerField()),
                ('allow_multiple_responses', models.IntegerField()),
                ('recognize', models.CharField(max_length=255)),
                ('never_spam_check', models.IntegerField()),
                ('real_actions', models.IntegerField()),
                ('hosted_with', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corehostingplatform')),
                ('lang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelist')),
                ('multilingual_campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremultilingualcampaign')),
            ],
            options={
                'db_table': 'core_page',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePageFollowup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('send_email', models.IntegerField()),
                ('url', models.CharField(max_length=255)),
                ('email_custom_from', models.CharField(max_length=255)),
                ('email_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('email_body', models.TextField(blank=True, null=True)),
                ('send_taf', models.IntegerField()),
                ('taf_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('taf_body', models.TextField(blank=True, null=True)),
                ('share_title', models.CharField(blank=True, max_length=255, null=True)),
                ('share_description', models.CharField(blank=True, max_length=1024, null=True)),
                ('share_image', models.CharField(blank=True, max_length=1024, null=True)),
                ('twitter_message', models.CharField(blank=True, max_length=280, null=True)),
                ('send_notifications', models.IntegerField()),
                ('send_pushes', models.IntegerField()),
                ('send_texts', models.IntegerField()),
                ('email_from_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corefromline')),
                ('email_wrapper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreemailwrapper')),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_pagefollowup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePaymentAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('processor', models.CharField(max_length=255)),
                ('auth', models.TextField()),
                ('extra', models.JSONField()),
            ],
            options={
                'db_table': 'core_paymentaccount',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('target_count', models.IntegerField()),
                ('signatures', models.IntegerField(blank=True, null=True)),
                ('format', models.CharField(max_length=255)),
                ('hostname', models.CharField(max_length=255)),
                ('filename', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_petitiondeliveryfile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('single_file', models.IntegerField()),
                ('cover_html', models.TextField()),
                ('header_content', models.TextField()),
                ('footer_content', models.TextField()),
                ('allow_pdf_download', models.IntegerField(blank=True, null=True)),
                ('allow_csv_download', models.IntegerField(blank=True, null=True)),
                ('include_prefix_in_csv', models.IntegerField()),
                ('include_first_name_in_csv', models.IntegerField()),
                ('include_middle_name_in_csv', models.IntegerField()),
                ('include_last_name_in_csv', models.IntegerField()),
                ('include_suffix_in_csv', models.IntegerField()),
                ('limit_delivery', models.IntegerField()),
                ('all_to_all', models.IntegerField(blank=True, null=True)),
                ('include_email_in_csv', models.IntegerField()),
                ('include_phone_in_csv', models.IntegerField()),
                ('include_address1_in_csv', models.IntegerField()),
                ('include_address2_in_csv', models.IntegerField()),
                ('include_city_in_csv', models.IntegerField()),
                ('include_state_in_csv', models.IntegerField()),
                ('include_zip_in_csv', models.IntegerField()),
                ('include_region_in_csv', models.IntegerField()),
                ('include_postal_in_csv', models.IntegerField()),
                ('include_country_in_csv', models.IntegerField()),
                ('include_comment_in_csv', models.IntegerField()),
                ('date_from', models.DateField(blank=True, null=True)),
                ('date_to', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_petitiondeliveryjob',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePrintTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('header_html', models.TextField()),
                ('template', models.TextField()),
                ('footer_html', models.TextField()),
                ('font_family', models.CharField(max_length=255)),
                ('font_size', models.FloatField()),
                ('logo_url', models.CharField(max_length=200)),
                ('page_size', models.CharField(max_length=255)),
                ('margin_units', models.CharField(max_length=255)),
                ('margin_top', models.FloatField()),
                ('margin_bottom', models.FloatField()),
                ('margin_left', models.FloatField()),
                ('margin_right', models.FloatField()),
                ('readonly', models.IntegerField()),
                ('hidden', models.IntegerField()),
            ],
            options={
                'db_table': 'core_printtemplate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePrivacyNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('text', models.TextField()),
            ],
            options={
                'db_table': 'core_privacynotes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=3)),
                ('shippable', models.IntegerField()),
                ('status', models.CharField(max_length=255)),
                ('maximum_order', models.IntegerField()),
                ('hidden', models.IntegerField()),
                ('admin_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_product',
                'managed': True,
                'unique_together': {('name', 'admin_name')},
            },
        ),
        migrations.CreateModel(
            name='CoreQueuedEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('envelope_sender', models.TextField()),
                ('to', models.TextField()),
                ('message', models.TextField()),
                ('metadata', models.TextField()),
            ],
            options={
                'db_table': 'core_queuedemail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRecurringDonorTargetingOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_recurringdonortargetingoption',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRecurringMailingSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('tz_name', models.CharField(max_length=64)),
                ('schedule_type', models.CharField(blank=True, max_length=255, null=True)),
                ('hours', models.CharField(blank=True, max_length=255, null=True)),
                ('days_of_week', models.CharField(blank=True, max_length=255, null=True)),
                ('days_of_month', models.CharField(blank=True, max_length=255, null=True)),
                ('send_finished_notice', models.IntegerField()),
            ],
            options={
                'db_table': 'core_recurringmailingschedule',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRedirect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_code', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('url', models.CharField(blank=True, max_length=4096, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_redirect',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreReengagementLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('dry_run', models.IntegerField()),
                ('engaged', models.IntegerField()),
                ('unengaged', models.IntegerField()),
                ('added', models.IntegerField()),
                ('removed', models.IntegerField()),
                ('unsubscribed', models.IntegerField()),
            ],
            options={
                'db_table': 'core_reengagementlog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreS3Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_key', models.CharField(max_length=255)),
                ('bucket', models.CharField(max_length=255)),
                ('secret_key', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_s3connection',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceApilLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('method', models.CharField(max_length=255)),
                ('params', models.TextField()),
                ('filename', models.CharField(max_length=255)),
                ('line', models.IntegerField()),
            ],
            options={
                'db_table': 'core_salesforceapilog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceFieldMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ak_field', models.CharField(max_length=255)),
                ('sf_field', models.CharField(max_length=255)),
                ('readonly', models.IntegerField()),
                ('direction', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_salesforcefieldmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('last_sf_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_ak_user_id', models.IntegerField(blank=True, null=True)),
                ('last_ak_action_id', models.IntegerField(blank=True, null=True)),
                ('created_ak_users', models.IntegerField()),
                ('created_ak_orders', models.IntegerField()),
                ('created_sf_users', models.IntegerField()),
                ('created_sf_opportunities', models.IntegerField()),
                ('updated_ak_users', models.IntegerField()),
                ('updated_sf_users', models.IntegerField()),
                ('failed_ak_users', models.IntegerField()),
                ('failed_sf_users', models.IntegerField()),
                ('status', models.CharField(max_length=20)),
                ('error', models.TextField(blank=True, null=True)),
                ('created_sf_recurring', models.IntegerField()),
                ('last_ak_updated_at', models.DateTimeField(blank=True, null=True)),
                ('last_ak_uf_updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_salesforcelog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceOrderFieldMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ak_field', models.CharField(max_length=255)),
                ('ak_literal', models.CharField(max_length=255)),
                ('sf_field', models.CharField(max_length=255)),
                ('sf_literal', models.CharField(max_length=255)),
                ('readonly', models.IntegerField()),
                ('direction', models.CharField(max_length=255)),
                ('builtin', models.IntegerField()),
            ],
            options={
                'db_table': 'core_salesforceorderfieldmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceRecurringOrderFieldMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ak_field', models.CharField(max_length=255)),
                ('ak_literal', models.CharField(max_length=255)),
                ('sf_field', models.CharField(max_length=255)),
                ('sf_literal', models.CharField(max_length=255)),
                ('readonly', models.IntegerField()),
                ('builtin', models.IntegerField()),
                ('direction', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_salesforcerecurringorderfieldmap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceSyncRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('sf_field', models.CharField(max_length=255)),
                ('rule_type', models.CharField(max_length=255)),
                ('operation', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_salesforcesyncrule',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceSyncTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('template', models.TextField()),
                ('sync', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_salesforcesynctemplate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSavedQueryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('mailing_id', models.IntegerField()),
                ('action', models.CharField(max_length=255)),
                ('reason', models.CharField(max_length=255)),
                ('triggered_by_id', models.IntegerField(blank=True, null=True)),
                ('process_id', models.IntegerField(blank=True, null=True)),
                ('targeting_version', models.IntegerField()),
            ],
            options={
                'db_table': 'core_savedquerylog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSavedQueryTimeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing_id', models.IntegerField()),
                ('sql', models.TextField()),
                ('time', models.FloatField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_savedquerytimelog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSignatureTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_default', models.IntegerField()),
                ('template', models.TextField()),
            ],
            options={
                'db_table': 'core_signaturetemplate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSubscriptionChangeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('subscribed', models.IntegerField()),
            ],
            options={
                'db_table': 'core_subscriptionchangetype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSubscriptionHistorySyncedToSendgrid',
            fields=[
                ('subscriptionhistory_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'core_subscriptionhistory_synced_to_sendgrid',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('hidden', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('times_used', models.IntegerField(blank=True, null=True)),
                ('order_index', models.IntegerField()),
            ],
            options={
                'db_table': 'core_tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=255)),
                ('seat', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('us_district', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('long_title', models.CharField(max_length=255)),
                ('first', models.CharField(max_length=255)),
                ('last', models.CharField(max_length=255)),
                ('official_full', models.CharField(max_length=255)),
                ('nickname', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=255)),
                ('fax', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255)),
                ('gender', models.CharField(max_length=1)),
                ('party', models.CharField(max_length=255)),
                ('hidden', models.IntegerField()),
                ('district_name', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('county', models.CharField(max_length=255)),
                ('twitter', models.CharField(blank=True, max_length=255, null=True)),
                ('twitter_id', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_id', models.CharField(blank=True, max_length=255, null=True)),
                ('youtube', models.CharField(blank=True, max_length=255, null=True)),
                ('youtube_id', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_target',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('type', models.CharField(max_length=255)),
                ('readonly', models.IntegerField()),
                ('hidden', models.IntegerField()),
            ],
            options={
                'db_table': 'core_targetgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetingQueryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_targetingqueryreport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTodayTimezone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tz_name', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'core_todaytimezone',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('custom_from', models.CharField(max_length=255)),
                ('reply_to', models.CharField(blank=True, max_length=255, null=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('type', models.CharField(max_length=20)),
                ('signature', models.CharField(blank=True, max_length=255, null=True)),
                ('from_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corefromline')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_transactionalmailing',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingSent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('transactional_mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailing')),
            ],
            options={
                'db_table': 'core_transactionalmailingsent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUnsubEmailState',
            fields=[
                ('unsub_email_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'core_unsub_email_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('path', models.CharField(max_length=255)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('progress', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('format', models.CharField(blank=True, max_length=10, null=True)),
                ('compression', models.CharField(blank=True, max_length=20, null=True)),
                ('autocreate_user_fields', models.IntegerField()),
                ('original_header', models.TextField()),
                ('override_header', models.TextField(blank=True, null=True)),
                ('line_count', models.IntegerField(blank=True, null=True)),
                ('user_fields_only', models.IntegerField(blank=True, null=True)),
                ('undoable', models.IntegerField()),
                ('undo_table', models.CharField(blank=True, max_length=255, null=True)),
                ('scorepool_score_all', models.IntegerField(blank=True, null=True)),
                ('scorepool_score_new', models.IntegerField(blank=True, null=True)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('scorepool_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='upload_scorepool_job', to='mydsa.corejob')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_upload',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.user')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('prefix', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('rand_id', models.IntegerField()),
                ('email_domain', models.CharField(blank=True, max_length=255, null=True)),
                ('lang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage')),
            ],
            options={
                'db_table': 'core_user',
                'managed': True,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CoreUserAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('useragent_string', models.TextField()),
                ('hash', models.CharField(max_length=64, unique=True)),
                ('browser', models.CharField(max_length=255)),
                ('browser_version', models.CharField(max_length=30)),
                ('os', models.CharField(max_length=255)),
                ('os_version', models.CharField(max_length=30)),
                ('device', models.CharField(max_length=255)),
                ('is_mobile', models.IntegerField()),
                ('is_phone', models.IntegerField()),
                ('is_tablet', models.IntegerField()),
                ('is_desktop', models.IntegerField()),
            ],
            options={
                'db_table': 'core_useragent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserDailySummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('avg_last_mailed', models.IntegerField(blank=True, null=True)),
                ('avg_last_open', models.IntegerField(blank=True, null=True)),
                ('avg_last_click', models.IntegerField(blank=True, null=True)),
                ('avg_last_mailing_action', models.IntegerField(blank=True, null=True)),
                ('avg_last_donation', models.IntegerField(blank=True, null=True)),
                ('avg_actions_last_90_days', models.IntegerField(blank=True, null=True)),
                ('avg_scorepool_userscore', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_userdailysummary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_usergroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2009',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2009',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2010',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2010',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2011',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2011',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2012',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2012',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2013',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2013',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2014',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2014',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailing2015',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_2015',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUsermailingArchiveModel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_usermailing_archive_model',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserMailingArchiveState',
            fields=[
                ('mailing_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'core_usermailing_archive_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserMerge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('status', models.CharField(max_length=255)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreusermerge')),
                ('primary', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('sms_primary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='merge_sms', to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_usermerge',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('us_district', models.CharField(max_length=5)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(max_length=32)),
                ('host_is_confirmed', models.IntegerField()),
                ('is_private', models.IntegerField()),
                ('is_approved', models.IntegerField()),
                ('attendee_count', models.IntegerField()),
                ('max_attendees', models.IntegerField(blank=True, null=True)),
                ('venue', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=255)),
                ('public_description', models.TextField(blank=True, null=True)),
                ('directions', models.TextField(blank=True, null=True)),
                ('note_to_attendees', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('starts_at_utc', models.DateTimeField(blank=True, null=True)),
                ('ends_at_utc', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('us_state_senate', models.CharField(max_length=6)),
                ('us_state_district', models.CharField(max_length=6)),
                ('us_county', models.CharField(blank=True, max_length=24, null=True)),
                ('mode', models.CharField(max_length=32)),
                ('timezone', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'events_event',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('title', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('public_create_page', models.IntegerField()),
                ('use_title', models.IntegerField()),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('use_start_date', models.IntegerField()),
                ('use_start_time', models.IntegerField()),
                ('require_staff_approval', models.IntegerField()),
                ('require_email_confirmation', models.IntegerField()),
                ('allow_private', models.IntegerField()),
                ('max_event_size', models.IntegerField(blank=True, null=True)),
                ('default_event_size', models.IntegerField(blank=True, null=True)),
                ('public_search_page', models.IntegerField()),
                ('show_title', models.IntegerField()),
                ('show_venue', models.IntegerField()),
                ('show_address1', models.IntegerField()),
                ('show_city', models.IntegerField()),
                ('show_state', models.IntegerField()),
                ('show_zip', models.IntegerField()),
                ('show_public_description', models.IntegerField()),
                ('show_directions', models.IntegerField()),
                ('show_attendee_count', models.IntegerField()),
                ('default_title', models.CharField(max_length=255)),
                ('hidden', models.IntegerField()),
                ('show_completed_events', models.IntegerField()),
                ('show_full_events', models.IntegerField()),
                ('timezone', models.CharField(max_length=255)),
                ('allow_moderation', models.IntegerField()),
                ('allow_moderator_edits', models.IntegerField(blank=True, null=True)),
                ('show_notes', models.IntegerField(blank=True, null=True)),
                ('mode_onsite', models.IntegerField()),
                ('mode_local', models.IntegerField()),
                ('mode_global', models.IntegerField()),
            ],
            options={
                'db_table': 'events_campaign',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsEmailBodyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('body', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'events_emailbodylog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsEmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('from_type', models.CharField(max_length=32)),
                ('to_type', models.CharField(max_length=32)),
                ('user_written_subject', models.TextField(blank=True, null=True)),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventsemailbodylog')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.event')),
                ('from_admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='staff_eventsemaillog', to=settings.AUTH_USER_MODEL)),
                ('from_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'events_emaillog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsHistoricalEvent',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('title', models.CharField(max_length=255)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('starts_at_utc', models.DateTimeField(blank=True, null=True)),
                ('ends_at_utc', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(max_length=32)),
                ('host_is_confirmed', models.IntegerField()),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('is_private', models.IntegerField()),
                ('is_approved', models.IntegerField()),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('attendee_count', models.IntegerField()),
                ('max_attendees', models.IntegerField(blank=True, null=True)),
                ('venue', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('us_district', models.CharField(max_length=5)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('us_state_senate', models.CharField(max_length=6)),
                ('us_state_district', models.CharField(max_length=6)),
                ('phone', models.CharField(max_length=255)),
                ('public_description', models.TextField(blank=True, null=True)),
                ('directions', models.TextField(blank=True, null=True)),
                ('note_to_attendees', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('history_id', models.IntegerField()),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('history_type', models.CharField(max_length=1)),
                ('campaign_id', models.IntegerField(blank=True, null=True)),
                ('creator_id', models.IntegerField(blank=True, null=True)),
                ('history_user_id', models.IntegerField(blank=True, null=True)),
                ('merged_to_id', models.IntegerField(blank=True, null=True)),
                ('us_county', models.CharField(blank=True, max_length=24, null=True)),
                ('mode', models.CharField(max_length=32)),
                ('timezone', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'events_historicalevent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventSignup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('role', models.CharField(max_length=32)),
                ('status', models.CharField(max_length=32)),
                ('page_id', models.IntegerField()),
                ('attended', models.IntegerField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'events_eventsignup',
                'managed': True,
                'unique_together': {('user', 'event')},
            },
        ),
        migrations.CreateModel(
            name='LabMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'lab_metric',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabPageType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('title', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'lab_pagetype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'lab_tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('scope', models.CharField(max_length=12)),
                ('allocation', models.CharField(max_length=32)),
                ('optimize_for', models.CharField(blank=True, max_length=32, null=True)),
                ('change_page_title', models.IntegerField()),
                ('change_intro_text', models.IntegerField()),
                ('change_thanks_text', models.IntegerField()),
                ('change_templateset', models.IntegerField()),
                ('change_custom_fields', models.IntegerField()),
                ('change_followup_url', models.IntegerField()),
                ('change_email_enabled', models.IntegerField()),
                ('change_email_subject', models.IntegerField()),
                ('change_email_body', models.IntegerField()),
                ('change_taf_enabled', models.IntegerField()),
                ('change_taf_subject', models.IntegerField()),
                ('change_taf_body', models.IntegerField()),
                ('change_share_title', models.IntegerField()),
                ('change_share_description', models.IntegerField()),
                ('change_share_image', models.IntegerField()),
                ('change_twitter_message', models.IntegerField()),
                ('change_recognize', models.IntegerField()),
                ('change_statement_text', models.IntegerField()),
                ('change_survey_text', models.IntegerField()),
                ('change_leadin_text', models.IntegerField()),
                ('change_donation_amounts', models.IntegerField()),
                ('change_donation_default', models.IntegerField()),
                ('change_donation_order', models.IntegerField()),
            ],
            options={
                'db_table': 'lab_test',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('letter', models.CharField(max_length=2)),
                ('weight', models.FloatField()),
                ('disabled', models.IntegerField()),
                ('page_title', models.CharField(max_length=255)),
                ('intro_text', models.TextField()),
                ('thanks_text', models.TextField()),
                ('followup_url', models.CharField(max_length=255)),
                ('email_enabled', models.CharField(max_length=1)),
                ('email_subject', models.CharField(max_length=255)),
                ('email_body', models.TextField()),
                ('taf_enabled', models.CharField(max_length=1)),
                ('taf_subject', models.CharField(max_length=255)),
                ('taf_body', models.TextField()),
                ('share_title', models.CharField(max_length=255)),
                ('share_description', models.TextField()),
                ('share_image', models.CharField(max_length=255)),
                ('twitter_message', models.CharField(blank=True, max_length=280, null=True)),
                ('recognize', models.CharField(max_length=6)),
                ('statement_text', models.TextField()),
                ('survey_text', models.TextField()),
                ('leadin_text', models.TextField()),
                ('donation_amounts', models.CharField(max_length=255)),
                ('donation_default', models.CharField(max_length=10)),
                ('donation_order', models.CharField(max_length=10)),
                ('templateset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
            ],
            options={
                'db_table': 'lab_variation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MergeFile33',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('testing', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mergefile_33',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OneClickCookie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('key', models.CharField(max_length=50, unique=True)),
                ('json', models.TextField()),
            ],
            options={
                'db_table': 'oneclick_cookie',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OneClickCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('internal_name', models.CharField(max_length=255)),
                ('ak_publishable_key', models.CharField(max_length=255)),
                ('provider', models.CharField(max_length=255)),
                ('provider_publishable_key', models.CharField(max_length=255)),
                ('keys', models.TextField()),
                ('public_name', models.CharField(max_length=255)),
                ('image_url', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('pac', models.IntegerField()),
                ('require_country', models.IntegerField()),
                ('prefill', models.IntegerField()),
                ('image_path', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'oneclick_credential',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OtpStaticStaticDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('confirmed', models.IntegerField()),
                ('throttling_failure_count', models.PositiveIntegerField()),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'otp_static_staticdevice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkCoreUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'pmk_core_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkJul14CoreUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'pmk_jul14_core_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest0',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_0',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest1',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest10',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_10',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest11',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_11',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest12',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_12',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest13',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_13',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest14',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_14',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest15',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_15',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest16',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_16',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest17',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_17',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest18',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_18',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest19',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_19',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest2',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest20',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_20',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest21',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_21',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest22',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_22',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest23',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_23',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest24',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_24',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest25',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_25',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest26',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_26',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest27',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_27',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest28',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_28',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest29',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_29',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest3',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_3',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest30',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_30',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest31',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_31',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest4',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_4',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest5',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_5',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest6',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_6',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest7',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_7',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest8',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_8',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PmkTest9',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pmk_test_9',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PushEndpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('url', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('triggers', models.JSONField()),
                ('ratelimit', models.IntegerField()),
                ('retries', models.IntegerField()),
                ('handler_id', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'push_endpoint',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RawMczDemo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zipcode', models.CharField(blank=True, max_length=255, null=True)),
                ('sequence', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('county', models.CharField(blank=True, max_length=255, null=True)),
                ('statefips', models.CharField(blank=True, max_length=255, null=True)),
                ('countyfips', models.CharField(blank=True, max_length=255, null=True)),
                ('percent', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'raw_mcz_demo',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RawZipSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip', models.CharField(max_length=5)),
                ('c', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'raw_zip_sample',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportsQueryTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('template', models.TextField()),
                ('hidden', models.IntegerField()),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'reports_querytemplate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportsReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('run_every', models.CharField(max_length=255)),
                ('to_emails', models.CharField(blank=True, max_length=4000, null=True)),
                ('hidden', models.IntegerField()),
                ('help_text', models.TextField()),
                ('send_if_no_rows', models.IntegerField()),
                ('run_day', models.IntegerField(blank=True, null=True)),
                ('run_weekday', models.IntegerField(blank=True, null=True)),
                ('run_hour', models.IntegerField(blank=True, null=True)),
                ('editable', models.IntegerField(blank=True, null=True)),
                ('result_notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'reports_report',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportsReportCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('hidden', models.IntegerField()),
                ('is_internal', models.IntegerField()),
            ],
            options={
                'db_table': 'reports_reportcategory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportsUserUpdater',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('run_every', models.CharField(max_length=255)),
                ('run_day', models.IntegerField()),
                ('run_weekday', models.IntegerField()),
                ('run_hour', models.IntegerField()),
                ('last_run_datetime', models.DateTimeField(blank=True, null=True)),
                ('last_run_status', models.CharField(blank=True, max_length=255, null=True)),
                ('last_run_count', models.IntegerField(blank=True, null=True)),
                ('last_run_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob')),
                ('report', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsreport')),
            ],
            options={
                'db_table': 'reports_userupdater',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RIdTemp',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'R_id_temp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RIdTemp2',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'R_id_temp2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RIdTemp3',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'R_id_temp3',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter3',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter4',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter5',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter5',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter6',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter6',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsersAlter7',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('subscription_status', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=249)),
                ('postal', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=5)),
                ('plus4', models.CharField(max_length=4)),
                ('country', models.CharField(max_length=255)),
                ('source', models.CharField(max_length=255)),
                ('lang_id', models.IntegerField(blank=True, null=True)),
                ('rand_id', models.IntegerField()),
            ],
            options={
                'db_table': 'R_users_alter7',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScorePoolListHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scored_at', models.DateField()),
                ('score_type', models.CharField(max_length=255)),
                ('score', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'scorepool_listhealth',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ShareType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=2)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'share_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SummaryMailing',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('mailing_id', models.IntegerField(primary_key=True, serialize=False)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('recipients', models.IntegerField(blank=True, null=True)),
                ('total_opens', models.IntegerField(blank=True, null=True)),
                ('total_raw_opens', models.IntegerField(blank=True, null=True)),
                ('opens', models.IntegerField(blank=True, null=True)),
                ('raw_opens', models.IntegerField(blank=True, null=True)),
                ('total_clicks', models.IntegerField(blank=True, null=True)),
                ('actions', models.IntegerField(blank=True, null=True)),
                ('orders', models.IntegerField(blank=True, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amount_converted', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unsubscribes', models.IntegerField(blank=True, null=True)),
                ('bounces', models.IntegerField(blank=True, null=True)),
                ('complaints', models.IntegerField(blank=True, null=True)),
                ('total_raw_clicks', models.IntegerField(blank=True, null=True)),
                ('clicks', models.IntegerField(blank=True, null=True)),
                ('raw_clicks', models.IntegerField(blank=True, null=True)),
                ('bounces_all', models.IntegerField()),
                ('total_unsubscribes', models.IntegerField()),
                ('new_users', models.IntegerField()),
                ('delays', models.IntegerField()),
            ],
            options={
                'db_table': 'summary_mailing',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SummaryUser',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('last_action', models.DateTimeField(blank=True, null=True)),
                ('last_mailing_action', models.DateTimeField(blank=True, null=True)),
                ('last_open', models.DateTimeField(blank=True, null=True)),
                ('last_click', models.DateTimeField(blank=True, null=True)),
                ('last_subscribed', models.DateTimeField(blank=True, null=True)),
                ('last_donation', models.DateTimeField(blank=True, null=True)),
                ('actions_last_30_days', models.SmallIntegerField(blank=True, null=True)),
                ('actions_last_60_days', models.SmallIntegerField(blank=True, null=True)),
                ('actions_last_90_days', models.SmallIntegerField(blank=True, null=True)),
                ('actions_last_180_days', models.SmallIntegerField(blank=True, null=True)),
                ('actions_last_270_days', models.SmallIntegerField(blank=True, null=True)),
                ('actions_last_365_days', models.SmallIntegerField(blank=True, null=True)),
                ('last_mailed', models.DateTimeField(blank=True, null=True)),
                ('last_raw_open', models.DateTimeField(blank=True, null=True)),
                ('mailbox_provider', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'summary_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TastypieApiAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255)),
                ('url', models.TextField()),
                ('request_method', models.CharField(max_length=10)),
                ('accessed', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'tastypie_apiaccess',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingAllowedTextMessageField',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('order_index', models.IntegerField()),
                ('display_name', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('always_show', models.IntegerField()),
                ('required', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('field_type', models.CharField(max_length=32)),
                ('field_default', models.TextField()),
                ('field_choices', models.TextField()),
                ('field_regex', models.TextField()),
                ('field_length', models.IntegerField(blank=True, null=True)),
                ('allow_multiple', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_allowedtextmessagefield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingBinding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('is_default', models.IntegerField()),
                ('title', models.CharField(max_length=64)),
                ('notes', models.CharField(max_length=255)),
                ('enabled', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_binding',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingBlockedRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'db_table': 'texting_blockedrecipient',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingBlockHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address', models.CharField(max_length=255)),
                ('message_id', models.IntegerField(blank=True, null=True)),
                ('action_id', models.IntegerField(blank=True, null=True)),
                ('matched_address', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_blockhistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingDeactRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('last_deact_notice_id', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_deactrun',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingIncomingMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('status', models.CharField(max_length=16)),
                ('source_address', models.CharField(max_length=24)),
                ('our_address', models.CharField(max_length=24)),
                ('content', models.TextField()),
            ],
            options={
                'db_table': 'texting_incomingmessage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingIncomingSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('status', models.CharField(max_length=16)),
                ('message_at', models.DateTimeField()),
                ('external_uid', models.CharField(max_length=24)),
                ('source_address', models.CharField(max_length=24)),
                ('our_address', models.CharField(max_length=24)),
                ('multipart_uid', models.IntegerField(blank=True, null=True)),
                ('multipart_total', models.IntegerField(blank=True, null=True)),
                ('multipart_part', models.IntegerField(blank=True, null=True)),
                ('content_type', models.CharField(max_length=24)),
                ('content_udh', models.CharField(max_length=24)),
                ('content_data', models.TextField()),
            ],
            options={
                'db_table': 'texting_incomingsegment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('is_default', models.IntegerField()),
                ('name', models.CharField(max_length=255, unique=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'texting_list',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('type', models.CharField(max_length=32)),
                ('notes', models.TextField()),
                ('send_type', models.CharField(max_length=32)),
                ('template', models.TextField()),
                ('media_url', models.CharField(max_length=255)),
                ('binding', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbinding')),
                ('lang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage')),
            ],
            options={
                'db_table': 'texting_message',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageSent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('send_type', models.CharField(max_length=32)),
                ('external_id', models.CharField(max_length=255)),
                ('segments', models.IntegerField()),
                ('is_proof', models.IntegerField()),
                ('sent_address', models.CharField(blank=True, max_length=64, null=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_messagesent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageset32',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'texting_messageset_32',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageset58',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'texting_messageset_58',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageset63',
            fields=[
                ('order_id', models.IntegerField()),
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'db_table': 'texting_messageset_63',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('exclude', models.IntegerField()),
                ('raw_sql', models.TextField(blank=True, null=True)),
                ('countries', models.TextField(blank=True, null=True)),
                ('states', models.TextField(blank=True, null=True)),
                ('regions', models.TextField(blank=True, null=True)),
                ('counties', models.TextField(blank=True, null=True)),
                ('divisions', models.TextField(blank=True, null=True)),
                ('zips', models.TextField(blank=True, null=True)),
                ('zip_radius', models.IntegerField(blank=True, null=True)),
                ('cds', models.TextField(blank=True, null=True)),
                ('state_senate_districts', models.TextField(blank=True, null=True)),
                ('state_house_districts', models.TextField(blank=True, null=True)),
                ('has_donated', models.IntegerField()),
                ('is_monthly_donor', models.IntegerField()),
                ('campaign_radius', models.IntegerField(blank=True, null=True)),
                ('campaign_samestate_only', models.IntegerField()),
                ('campaign_same_district_only', models.IntegerField()),
                ('campaign_same_county_only', models.IntegerField()),
                ('campaign_first_date', models.CharField(max_length=16)),
                ('campaign_last_date', models.CharField(max_length=16)),
                ('mirror_message_excludes', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_messagetargeting',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMockGatewaySent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address', models.CharField(max_length=64)),
                ('originator', models.CharField(max_length=64)),
                ('content', models.TextField()),
                ('media_url', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'texting_mockgatewaysent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingOriginator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('gateway', models.CharField(max_length=32)),
                ('address', models.CharField(max_length=32)),
                ('display', models.CharField(max_length=32)),
                ('enabled', models.IntegerField()),
                ('rate_per_minute', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_originator',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address', models.CharField(max_length=64)),
                ('status', models.CharField(max_length=16)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'texting_subscriber',
                'managed': True,
                'unique_together': {('user', 'address')},
            },
        ),
        migrations.CreateModel(
            name='TextingSubscriptionChangeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=24, unique=True)),
                ('description', models.CharField(max_length=255)),
                ('subscribed', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_subscriptionchangetype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTargetingQueryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_targetingqueryreport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WebhookNotificationReceived',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('status', models.CharField(max_length=255)),
                ('error', models.TextField()),
                ('retries', models.IntegerField()),
            ],
            options={
                'db_table': 'webhooks_webhooknotificationreceived',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WebhookNotificationReceivedLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('status', models.CharField(max_length=255)),
                ('error', models.TextField()),
                ('retries', models.IntegerField()),
                ('actblue_id', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'db_table': 'webhooks_webhooknotificationreceivedlog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCallAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_callaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCallPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('constituents_only_url', models.CharField(max_length=200)),
                ('allow_local_targetoffices', models.IntegerField()),
            ],
            options={
                'db_table': 'core_callpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreConfirmationMailing',
            fields=[
                ('transactionalmailing_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretransactionalmailing')),
            ],
            options={
                'db_table': 'core_confirmationmailing',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCongressTargetGroup',
            fields=[
                ('targetgroup_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretargetgroup')),
                ('include_republicans', models.IntegerField()),
                ('include_democrats', models.IntegerField()),
                ('include_independents', models.IntegerField()),
                ('states', models.TextField()),
            ],
            options={
                'db_table': 'core_congresstargetgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_donationaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationCancellationAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_donationcancellationaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationCancellationPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_donationcancellationpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('minimum_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_account', models.CharField(max_length=255)),
                ('allow_international', models.IntegerField()),
                ('use_account_switcher', models.IntegerField(blank=True, null=True)),
                ('paypal_account', models.CharField(blank=True, max_length=255, null=True)),
                ('paypal_user_requirements', models.CharField(max_length=255)),
                ('accept_ach', models.IntegerField()),
                ('filtering_for_mailings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_donation', to='mydsa.coredonationfraudfilter')),
                ('filtering_for_web', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='web_donation', to='mydsa.coredonationfraudfilter')),
                ('hpc_rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredonationhpcrule')),
            ],
            options={
                'db_table': 'core_donationpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationUpdateAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_donationupdateaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationUpdatePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_donationupdatepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreImportAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_importaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreLastEngaged',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreuser')),
                ('days', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'core_lastengaged',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreLetterAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_letteraction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreLetterPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('send_immediate_fax', models.IntegerField(blank=True, null=True)),
                ('send_immediate_email', models.IntegerField(blank=True, null=True)),
                ('send_immediate_email_override_limit', models.IntegerField()),
                ('email_mode', models.IntegerField(blank=True, null=True)),
                ('remind_me_set_up_batch_delivery', models.IntegerField()),
                ('immediate_email_subject', models.TextField(blank=True, null=True)),
                ('delivery_template', models.TextField(blank=True, null=True)),
                ('batch_delivery_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('batch_delivery_template', models.TextField(blank=True, null=True)),
                ('batch_petitiondeliveryjob_id', models.IntegerField(blank=True, null=True)),
                ('send_immediate_email_delivery_blocked_at', models.DateTimeField(blank=True, null=True)),
                ('batch_delivery_threshold', models.IntegerField(blank=True, null=True)),
                ('batch_delivery_minimum', models.IntegerField()),
                ('send_via_cwc', models.IntegerField(blank=True, null=True)),
                ('cwc_topic', models.CharField(blank=True, max_length=255, null=True)),
                ('cwc_statement', models.TextField(blank=True, null=True)),
                ('cwc_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('batch_delivery_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corefromline')),
            ],
            options={
                'db_table': 'core_letterpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreLocation',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreuser')),
                ('us_district', models.CharField(max_length=5)),
                ('us_state_senate', models.CharField(max_length=6)),
                ('us_state_district', models.CharField(max_length=6)),
                ('us_county', models.CharField(max_length=255)),
                ('loc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('region_code', models.CharField(blank=True, max_length=20, null=True)),
                ('lat_lon_precision', models.CharField(blank=True, max_length=32, null=True)),
                ('timezone', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_location',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingSummary',
            fields=[
                ('mailing', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coremailing')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('targeting_version', models.IntegerField(blank=True, null=True)),
                ('avg_last_mailed', models.IntegerField(blank=True, null=True)),
                ('avg_last_open', models.IntegerField(blank=True, null=True)),
                ('avg_last_click', models.IntegerField(blank=True, null=True)),
                ('avg_last_mailing_action', models.IntegerField(blank=True, null=True)),
                ('avg_last_donation', models.IntegerField(blank=True, null=True)),
                ('avg_actions_last_90_days', models.IntegerField(blank=True, null=True)),
                ('avg_scorepool_userscore', models.IntegerField(blank=True, null=True)),
                ('users_without_summary', models.IntegerField(blank=True, null=True)),
                ('users_without_last_mailed', models.IntegerField(blank=True, null=True)),
                ('users_without_last_open', models.IntegerField(blank=True, null=True)),
                ('users_without_last_click', models.IntegerField(blank=True, null=True)),
                ('users_without_last_mailing_action', models.IntegerField(blank=True, null=True)),
                ('users_without_last_donation', models.IntegerField(blank=True, null=True)),
                ('users_without_scorepool_userscore', models.IntegerField(blank=True, null=True)),
                ('recipients', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_mailingtargetingsummary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePetitionAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_petitionaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePetitionPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('send_immediate_fax', models.IntegerField(blank=True, null=True)),
                ('send_immediate_email', models.IntegerField(blank=True, null=True)),
                ('send_immediate_email_override_limit', models.IntegerField()),
                ('email_mode', models.IntegerField(blank=True, null=True)),
                ('remind_me_set_up_batch_delivery', models.IntegerField()),
                ('immediate_email_subject', models.TextField(blank=True, null=True)),
                ('delivery_template', models.TextField(blank=True, null=True)),
                ('one_click', models.IntegerField()),
                ('batch_delivery_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('batch_delivery_template', models.TextField(blank=True, null=True)),
                ('batch_petitiondeliveryjob_id', models.IntegerField(blank=True, null=True)),
                ('send_immediate_email_delivery_blocked_at', models.DateTimeField(blank=True, null=True)),
                ('batch_delivery_threshold', models.IntegerField(blank=True, null=True)),
                ('batch_delivery_minimum', models.IntegerField()),
                ('send_via_cwc', models.IntegerField(blank=True, null=True)),
                ('cwc_topic', models.CharField(blank=True, max_length=255, null=True)),
                ('cwc_statement', models.TextField(blank=True, null=True)),
                ('cwc_subject', models.CharField(blank=True, max_length=255, null=True)),
                ('batch_delivery_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corefromline')),
            ],
            options={
                'db_table': 'core_petitionpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePolTargetGroup',
            fields=[
                ('targetgroup_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretargetgroup')),
                ('body_id', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_poltargetgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRecurringDonationCancelAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_recurringdonationcancelaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRecurringDonationCancelPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_recurringdonationcancelpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRecurringDonationUpdateAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_recurringdonationupdateaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRecurringDonationUpdatePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('minimum_amount', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'core_recurringdonationupdatepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRedirectAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_redirectaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreRedirectPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_redirectpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSession',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
                ('session_key', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_session',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSignupAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_signupaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSignupPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_signuppage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSurveyAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_surveyaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSurveyPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_surveypage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTafMailing',
            fields=[
                ('transactionalmailing_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretransactionalmailing')),
            ],
            options={
                'db_table': 'core_tafmailing',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTellAFriendAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_tellafriendaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTellAFriendPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_tellafriendpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUnsubscribeAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_unsubscribeaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUnsubscribePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('use_in_mail_wrapper', models.IntegerField()),
            ],
            options={
                'db_table': 'core_unsubscribepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserOriginal',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreuser')),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=255)),
                ('address1_updated_at', models.DateTimeField(blank=True, null=True)),
                ('address2_updated_at', models.DateTimeField(blank=True, null=True)),
                ('city_updated_at', models.DateTimeField(blank=True, null=True)),
                ('state_updated_at', models.DateTimeField(blank=True, null=True)),
                ('zip_updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_useroriginal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserUpdateAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_userupdateaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserUpdatePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_userupdatepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreWhipcountAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_whipcountaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreWhipcountPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_whipcountpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreWhipcountPageFollowup',
            fields=[
                ('pagefollowup_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepagefollowup')),
            ],
            options={
                'db_table': 'core_whipcountpagefollowup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EraserLog',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreuser')),
                ('hashed_email', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'eraser_eraserlog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportsDashboardReport',
            fields=[
                ('report_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.reportsreport')),
                ('template', models.TextField()),
                ('minidash', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'reports_dashboardreport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReportsQueryReport',
            fields=[
                ('report_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.reportsreport')),
                ('sql', models.TextField()),
                ('email_always_csv', models.IntegerField(blank=True, null=True)),
                ('refresh', models.CharField(blank=True, max_length=255, null=True)),
                ('display_as', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsquerytemplate')),
            ],
            options={
                'db_table': 'reports_queryreport',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScorePoolLastEngaged',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreuser')),
                ('days', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'scorepool_lastengaged',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ScorePoolUserScore',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreuser')),
                ('score', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'scorepool_userscore',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SpamCheckerActionState',
            fields=[
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'spam_checkeractionstate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingAfterActionMessage',
            fields=[
                ('message_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_afteractionmessage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingBroadcast',
            fields=[
                ('message_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.textingmessage')),
                ('status', models.CharField(blank=True, max_length=255, null=True)),
                ('sent_proofs', models.IntegerField()),
                ('target_mergefile', models.IntegerField()),
                ('target_mergequery', models.IntegerField()),
                ('targeting_version', models.IntegerField(blank=True, null=True)),
                ('targeting_version_saved', models.IntegerField(blank=True, null=True)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('progress', models.IntegerField(blank=True, null=True)),
                ('query_queued_at', models.DateTimeField(blank=True, null=True)),
                ('query_started_at', models.DateTimeField(blank=True, null=True)),
                ('query_completed_at', models.DateTimeField(blank=True, null=True)),
                ('query_previous_runtime', models.IntegerField(blank=True, null=True)),
                ('query_status', models.CharField(blank=True, max_length=255, null=True)),
                ('query_task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('queue_task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('queued_at', models.DateTimeField(blank=True, null=True)),
                ('expected_send_count', models.IntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('requested_proofs', models.IntegerField(blank=True, null=True)),
                ('requested_proof_date', models.DateTimeField(blank=True, null=True)),
                ('target_group_from_landing_page', models.IntegerField()),
                ('respect_recipient_time', models.IntegerField()),
                ('limit', models.IntegerField(blank=True, null=True)),
                ('limit_percent', models.IntegerField(blank=True, null=True)),
                ('sort_by', models.CharField(blank=True, max_length=32, null=True)),
                ('max_per_second', models.FloatField(blank=True, null=True)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('rebuild_query_at_send', models.IntegerField()),
                ('landing_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('mergefile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremergefile')),
                ('mergequery_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport')),
                ('queued_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='text_broadcast_queued', to=settings.AUTH_USER_MODEL)),
                ('scheduled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='text_broadcast_scheduled', to=settings.AUTH_USER_MODEL)),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='text_broadcast_submitted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'texting_broadcast',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingConfirmationMessage',
            fields=[
                ('message_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.textingmessage')),
                ('status_trigger', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'texting_confirmationmessage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingKeywordResponseMessage',
            fields=[
                ('message_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.textingmessage')),
                ('subscription_status', models.CharField(blank=True, max_length=32, null=True)),
                ('keywords', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'texting_keywordresponsemessage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTextingSendBroadcastJob',
            fields=[
                ('job_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corejob')),
            ],
            options={
                'db_table': 'texting_textingsendbroadcastjob',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTextMessageCountJob',
            fields=[
                ('job_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corejob')),
            ],
            options={
                'db_table': 'texting_textmessagecountjob',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TwoFactorPhoneDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('confirmed', models.IntegerField()),
                ('number', models.CharField(max_length=16)),
                ('key', models.CharField(max_length=40)),
                ('method', models.CharField(max_length=4)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'two_factor_phonedevice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TigerStateDistrictMigrated',
            fields=[
                ('chamber', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('tiger_dist', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'tiger_state_district_migrated',
                'managed': True,
                'unique_together': {('chamber', 'tiger_dist')},
            },
        ),
        migrations.CreateModel(
            name='TextingTextMessageField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingallowedtextmessagefield')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_textmessagefield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTargetingUserField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('values', models.TextField(blank=True, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corealloweduserfield')),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_targetinguserfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTargetingQueryReportParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=4096)),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingtargetingqueryreport')),
            ],
            options={
                'db_table': 'texting_targetingqueryreportparam',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTargetingEventField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('values', models.TextField(blank=True, null=True)),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_targetingeventfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingTargetingActionField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('values', models.TextField(blank=True, null=True)),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_targetingactionfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingSubscriptionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('comment', models.CharField(blank=True, max_length=255, null=True)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('change', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingsubscriptionchangetype')),
                ('incoming_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingincomingmessage')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textinglist')),
                ('message_sent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagesent')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingsubscriber')),
            ],
            options={
                'db_table': 'texting_subscriptionhistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingSubscriptionCountHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('date', models.DateField()),
                ('subscribers', models.IntegerField()),
                ('list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textinglist')),
            ],
            options={
                'db_table': 'texting_subscriptioncounthistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingShortLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('link', models.CharField(max_length=4096)),
                ('message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_shortlink',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingReferredAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('referring_message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_referredaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMockGatewayReceived',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('address', models.CharField(max_length=64)),
                ('originator', models.CharField(max_length=64)),
                ('content', models.TextField()),
                ('delivered', models.IntegerField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_mockgatewayreceived',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingBoundaries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting_id', models.IntegerField()),
                ('boundary_id', models.IntegerField()),
            ],
            options={
                'db_table': 'texting_messagetargeting_boundaries',
                'managed': True,
                'unique_together': {('messagetargeting_id', 'boundary_id')},
            },
        ),
        migrations.AddField(
            model_name='textingmessagesent',
            name='originator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingoriginator'),
        ),
        migrations.AddField(
            model_name='textingmessagesent',
            name='sent_in_reply_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingincomingmessage'),
        ),
        migrations.AddField(
            model_name='textingmessagesent',
            name='subscriber',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingsubscriber'),
        ),
        migrations.CreateModel(
            name='TextingMessageFailed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('reason', models.TextField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
                ('originator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingoriginator')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingsubscriber')),
            ],
            options={
                'db_table': 'texting_messagefailed',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('queue_task_id', models.CharField(max_length=255)),
                ('traceback', models.TextField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_messageerror',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='textingincomingmessage',
            name='originator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingoriginator'),
        ),
        migrations.AddField(
            model_name='textingincomingmessage',
            name='prior_send',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagesent'),
        ),
        migrations.AddField(
            model_name='textingincomingmessage',
            name='subscriber',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingsubscriber'),
        ),
        migrations.CreateModel(
            name='TextingDeliveryReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('gateway', models.CharField(max_length=32)),
                ('payload', models.JSONField()),
                ('for_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagesent')),
            ],
            options={
                'db_table': 'texting_deliveryreceipt',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('click_id', models.IntegerField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'texting_click',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'texting_action',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TastypieApiKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=256)),
                ('created', models.DateTimeField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tastypie_apikey',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SummaryMailingSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('mailing_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('recipients', models.IntegerField(blank=True, null=True)),
                ('opens', models.IntegerField(blank=True, null=True)),
                ('raw_opens', models.IntegerField(blank=True, null=True)),
                ('total_opens', models.IntegerField(blank=True, null=True)),
                ('total_raw_opens', models.IntegerField(blank=True, null=True)),
                ('clicks', models.IntegerField(blank=True, null=True)),
                ('raw_clicks', models.IntegerField(blank=True, null=True)),
                ('total_clicks', models.IntegerField(blank=True, null=True)),
                ('total_raw_clicks', models.IntegerField(blank=True, null=True)),
                ('actions', models.IntegerField(blank=True, null=True)),
                ('orders', models.IntegerField(blank=True, null=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amount_converted', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('unsubscribes', models.IntegerField(blank=True, null=True)),
                ('bounces', models.IntegerField(blank=True, null=True)),
                ('complaints', models.IntegerField(blank=True, null=True)),
                ('total_unsubscribes', models.IntegerField()),
                ('new_users', models.IntegerField()),
                ('bounces_all', models.IntegerField()),
                ('delays', models.IntegerField()),
            ],
            options={
                'db_table': 'summary_mailingsubject',
                'managed': True,
                'unique_together': {('mailing_id', 'subject_id')},
            },
        ),
        migrations.CreateModel(
            name='SpamCheckLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('check', models.CharField(max_length=255)),
                ('why', models.TextField(blank=True, null=True)),
                ('whitelisted', models.IntegerField()),
                ('action_status', models.CharField(max_length=255)),
                ('action_updated_at', models.DateTimeField()),
                ('reversed', models.IntegerField()),
                ('reversed_at', models.DateTimeField(blank=True, null=True)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'spam_spamchecklog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ShareLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=2)),
                ('generation', models.PositiveSmallIntegerField()),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('referring_share', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.sharelink')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'share_link',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ShareClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('click_id', models.IntegerField(blank=True, null=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('share', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.sharelink')),
            ],
            options={
                'db_table': 'share_click',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ShareAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('share', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.sharelink')),
            ],
            options={
                'db_table': 'share_action',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RUsermailingTest',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('subject_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'R_usermailing_test',
                'managed': True,
                'unique_together': {('mailing_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='ReportsUserUpdaterStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('userupdater', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsuserupdater')),
            ],
            options={
                'db_table': 'reports_userupdater_staff',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RenamedCoreTransactionsCorePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('account', models.CharField(max_length=255)),
                ('test_mode', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('success', models.IntegerField()),
                ('trans_id', models.CharField(blank=True, max_length=255, null=True)),
                ('failure_description', models.CharField(max_length=255)),
                ('failure_code', models.IntegerField(blank=True, null=True)),
                ('failure_message', models.CharField(max_length=255)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
            ],
            options={
                'db_table': 'renamed_core_transactions_core_payment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QuickDonateEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'quickdonate_enrollment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OtpTotpTotpDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('confirmed', models.IntegerField()),
                ('key', models.CharField(max_length=80)),
                ('step', models.PositiveSmallIntegerField()),
                ('t0', models.BigIntegerField()),
                ('digits', models.PositiveSmallIntegerField()),
                ('tolerance', models.PositiveSmallIntegerField()),
                ('drift', models.SmallIntegerField()),
                ('last_t', models.BigIntegerField()),
                ('throttling_failure_count', models.PositiveIntegerField()),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'otp_totp_totpdevice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OtpStaticStaticToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=16)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.otpstaticstaticdevice')),
            ],
            options={
                'db_table': 'otp_static_statictoken',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OneClickUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'oneclick_use',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('filename', models.CharField(max_length=255)),
                ('mailing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('share', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.sharelink')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'lab_view',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabVariationcustomfield',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreallowedpagefield')),
                ('variation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labvariation')),
            ],
            options={
                'db_table': 'lab_variationcustomfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabTrial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
            ],
            options={
                'db_table': 'lab_trial',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('session_key', models.CharField(blank=True, max_length=255, null=True)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('variation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labvariation')),
            ],
            options={
                'db_table': 'lab_enrollment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabEnrolledView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labenrollment')),
                ('view', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labview')),
            ],
            options={
                'db_table': 'lab_enrolledview',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabEnrolledShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labenrollment')),
                ('share', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.sharelink')),
            ],
            options={
                'db_table': 'lab_enrolledshare',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LabEnrolledAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labenrollment')),
            ],
            options={
                'db_table': 'lab_enrolledaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventSignupField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventsignup')),
            ],
            options={
                'db_table': 'events_eventsignupfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsCustomEmailGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'events_customemailgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsCustomEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email_subject', models.TextField(blank=True, null=True)),
                ('email_body', models.TextField(blank=True, null=True)),
                ('type', models.CharField(max_length=50)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscustomemailgroup')),
            ],
            options={
                'db_table': 'events_customemail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventsCampaignVolunteer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_approved', models.IntegerField()),
                ('status', models.CharField(max_length=32)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'events_campaignvolunteer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.event')),
            ],
            options={
                'db_table': 'events_eventfield',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='campaign',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign'),
        ),
        migrations.AddField(
            model_name='event',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser'),
        ),
        migrations.AddField(
            model_name='event',
            name='merged_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.event'),
        ),
        migrations.CreateModel(
            name='CoreUserStaffNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('note', models.TextField()),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='staff_note', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_userstaffnote',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserPageTags',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tag_id', models.IntegerField()),
            ],
            options={
                'db_table': 'core_user_page_tags',
                'managed': True,
                'unique_together': {('user_id', 'tag_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreUserGeoField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_usergeofield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserField',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField()),
                ('value', models.TextField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corealloweduserfield')),
            ],
            options={
                'db_table': 'core_userfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUploadWarning',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('worker_pid', models.IntegerField(blank=True, null=True)),
                ('row', models.IntegerField(blank=True, null=True)),
                ('col', models.IntegerField(blank=True, null=True)),
                ('message', models.TextField()),
                ('exception', models.TextField(blank=True, null=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('raw_row', models.TextField(blank=True, null=True)),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreupload')),
            ],
            options={
                'db_table': 'core_uploadwarning',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUploadUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('created_user', models.IntegerField()),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreupload')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_uploaduser',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUploadUndoSkipped',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreupload')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_uploadundoskipped',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUploadProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('worker_pid', models.IntegerField()),
                ('ok', models.IntegerField()),
                ('warnings', models.IntegerField()),
                ('errors', models.IntegerField()),
                ('rate', models.FloatField(blank=True, null=True)),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreupload')),
            ],
            options={
                'db_table': 'core_uploadprogress',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUploadError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('worker_pid', models.IntegerField(blank=True, null=True)),
                ('row', models.IntegerField(blank=True, null=True)),
                ('col', models.IntegerField(blank=True, null=True)),
                ('message', models.TextField()),
                ('exception', models.TextField(blank=True, null=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('raw_row', models.TextField(blank=True, null=True)),
                ('upload', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreupload')),
            ],
            options={
                'db_table': 'core_uploaderror',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coreupload',
            name='user_updater',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsuserupdater'),
        ),
        migrations.CreateModel(
            name='CoreUnsubEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField()),
                ('action_id', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'db_table': 'core_unsub_email',
                'managed': True,
                'unique_together': {('user_id', 'action_id'), ('user_id', 'mailing_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingUnsub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('transactional_mailing_sent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailingsent')),
            ],
            options={
                'db_table': 'core_transactionalmailingunsub',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coretransactionalmailingsent',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser'),
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingOpenRaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('transactional_mailing_sent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailingsent')),
            ],
            options={
                'db_table': 'core_transactionalmailingopenraw',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingOpen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('transactional_mailing_sent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailingsent')),
            ],
            options={
                'db_table': 'core_transactionalmailingopen',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingClickRaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('link_number', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(max_length=255)),
                ('clickurl', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreclickurl')),
                ('transactional_mailing_sent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailingsent')),
            ],
            options={
                'db_table': 'core_transactionalmailingclickraw',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('link_number', models.IntegerField(blank=True, null=True)),
                ('source', models.CharField(max_length=255)),
                ('clickurl', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreclickurl')),
                ('transactional_mailing_sent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailingsent')),
            ],
            options={
                'db_table': 'core_transactionalmailingclick',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('transactional_mailing_sent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailingsent')),
            ],
            options={
                'db_table': 'core_transactionalmailingaction',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coretransactionalmailing',
            name='variation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labvariation'),
        ),
        migrations.AddField(
            model_name='coretransactionalmailing',
            name='wrapper',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreemailwrapper'),
        ),
        migrations.CreateModel(
            name='CoreTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=255)),
                ('account', models.CharField(max_length=255)),
                ('test_mode', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_converted', models.DecimalField(decimal_places=2, max_digits=10)),
                ('success', models.IntegerField()),
                ('trans_id', models.CharField(blank=True, max_length=255, null=True)),
                ('failure_description', models.TextField(blank=True, null=True)),
                ('failure_code', models.CharField(blank=True, max_length=255, null=True)),
                ('failure_message', models.TextField(blank=True, null=True)),
                ('status', models.CharField(max_length=255)),
                ('currency', models.CharField(max_length=3)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
                ('ref_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransaction')),
            ],
            options={
                'db_table': 'core_transaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTimezonePreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tz_name', models.CharField(max_length=64)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_timezonepreference',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetOffice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=255)),
                ('address1', models.CharField(max_length=255)),
                ('address2', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('zip', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=255)),
                ('fax', models.CharField(max_length=255)),
                ('is_current', models.IntegerField()),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_targetoffice',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetingUserField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('values', models.TextField(blank=True, null=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corealloweduserfield')),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_targetinguserfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetingQueryReportParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(blank=True, max_length=4096, null=True)),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetingqueryreport')),
            ],
            options={
                'db_table': 'core_targetingqueryreportparam',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetingEventField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('values', models.TextField(blank=True, null=True)),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_targetingeventfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetingActionField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('values', models.TextField(blank=True, null=True)),
                ('page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('targeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_targetingactionfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreTargetContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(max_length=255)),
                ('is_current', models.IntegerField()),
                ('prefix', models.CharField(max_length=255)),
                ('first_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('suffix', models.CharField(max_length=255)),
                ('is_mailable', models.IntegerField()),
                ('email_version_hash', models.CharField(blank=True, max_length=255, null=True)),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_targetcontact',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSupportContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_supportcontact',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSubscriptionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('change', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coresubscriptionchangetype')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_subscriptionhistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSubscriptionCountHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('date', models.DateField()),
                ('subscribers', models.IntegerField()),
                ('list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelist')),
            ],
            options={
                'db_table': 'core_subscriptioncounthistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceUserFailedSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('reason', models.CharField(max_length=1024)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_salesforceuserfailedsync',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceAddressUpdatedQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('sent', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_salesforceaddressupdatedqueue',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePrivacyText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('text', models.TextField()),
                ('type', models.TextField()),
                ('hash', models.CharField(max_length=64, unique=True)),
                ('accepted', models.IntegerField()),
                ('lang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage')),
            ],
            options={
                'db_table': 'core_privacytext',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePrivacyRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('status', models.CharField(max_length=32)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreprivacytext')),
            ],
            options={
                'db_table': 'core_privacyrecord',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePreviousPageTags',
            fields=[
                ('page_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tag_id', models.IntegerField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_previous_page_tags',
                'managed': True,
                'unique_together': {('page_id', 'tag_id')},
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryJobBuilder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('queued', models.IntegerField()),
                ('completed', models.IntegerField()),
                ('status', models.CharField(max_length=255)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryjob')),
            ],
            options={
                'db_table': 'core_petitiondeliveryjobbuilder',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='corepetitiondeliveryjob',
            name='print_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreprinttemplate'),
        ),
        migrations.AddField(
            model_name='corepetitiondeliveryjob',
            name='template_set',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset'),
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryFileDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('downloaded_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryfile')),
            ],
            options={
                'db_table': 'core_petitiondeliveryfiledownload',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryFileCollector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('queued', models.IntegerField()),
                ('completed', models.IntegerField()),
                ('status', models.CharField(max_length=255)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('format', models.CharField(max_length=255)),
                ('archive', models.CharField(blank=True, max_length=255, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryjob')),
            ],
            options={
                'db_table': 'core_petitiondeliveryfilecollector',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='corepetitiondeliveryfile',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryjob'),
        ),
        migrations.CreateModel(
            name='CorePageTargetChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('targets_representation', models.TextField()),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_pagetargetchange',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CorePageField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreallowedpagefield')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_pagefield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreOrderRecurring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('exp_date', models.CharField(max_length=6)),
                ('card_num', models.CharField(max_length=4)),
                ('recurring_id', models.CharField(blank=True, max_length=255, null=True)),
                ('account', models.CharField(blank=True, max_length=255, null=True)),
                ('start', models.DateField()),
                ('period', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=3)),
                ('amount_converted', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(max_length=255)),
                ('action', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_orderrecurring',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreOrderDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('quantity', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_converted', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(max_length=3)),
                ('status', models.CharField(max_length=255)),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecandidate')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreproduct')),
            ],
            options={
                'db_table': 'core_order_detail',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coreorder',
            name='shipping_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreordershippingaddress'),
        ),
        migrations.AddField(
            model_name='coreorder',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser'),
        ),
        migrations.AddField(
            model_name='coreorder',
            name='user_detail',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorderuserdetail'),
        ),
        migrations.CreateModel(
            name='CoreOpenRawOld',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('useragent_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_open_raw_old',
                'managed': True,
                'unique_together': {('id', 'created_at')},
            },
        ),
        migrations.CreateModel(
            name='CoreOpenRaw',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('useragent_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_open_raw',
                'managed': True,
                'unique_together': {('id', 'created_at')},
            },
        ),
        migrations.CreateModel(
            name='CoreNoticeClosed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('notice', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corenotice')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_noticeclosed',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreModelAdminDefaults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('initial_values_json', models.TextField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'core_modeladmindefaults',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMessageEventRaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('action_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('event_type', models.CharField(max_length=25)),
                ('bounce_class', models.IntegerField(blank=True, null=True)),
                ('smtp_error_code', models.CharField(blank=True, max_length=3, null=True)),
                ('ext_event_id', models.CharField(max_length=25)),
            ],
            options={
                'db_table': 'core_message_event_raw',
                'managed': True,
                'unique_together': {('id', 'created_at')},
            },
        ),
        migrations.CreateModel(
            name='CoreMergeQueryParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'core_mergequeryparam',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingVariationDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('field_type', models.CharField(max_length=255)),
                ('field_name', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('variation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingvariation')),
            ],
            options={
                'db_table': 'core_mailingvariationdetail',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coremailingtargeting',
            name='delivery_job',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryjob'),
        ),
        migrations.AddField(
            model_name='coremailingtargeting',
            name='mailbox_provider_activity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailboxprovideractivity'),
        ),
        migrations.CreateModel(
            name='CoreMailingField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreallowedmailingfield')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'core_mailingfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('queue_task_id', models.CharField(max_length=255)),
                ('traceback', models.TextField()),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'core_mailingerror',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coremailing',
            name='excludes',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_excludes', to='mydsa.coremailingtargeting'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='fromline',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corefromline'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='includes',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_includes', to='mydsa.coremailingtargeting'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='landing_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='lang',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='mergefile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremergefile'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='queued_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_queued', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='recurring_schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corerecurringmailingschedule'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='recurring_source_mailing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_recurring_source', to='mydsa.coremailing'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='scheduled_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_scheduled', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='send_time_validation_job',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='submitter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mailing_submitted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='test_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtestgroup'),
        ),
        migrations.AddField(
            model_name='coremailing',
            name='winning_subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingsubject'),
        ),
        migrations.CreateModel(
            name='CoreJobStatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('status', models.CharField(max_length=20)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob')),
            ],
            options={
                'db_table': 'core_jobstatuslog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreJobState',
            fields=[
                ('job', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('attribute', models.CharField(max_length=255)),
                ('value', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_job_state',
                'managed': True,
                'unique_together': {('job', 'attribute')},
            },
        ),
        migrations.CreateModel(
            name='CoreJobSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('signal', models.CharField(blank=True, max_length=20, null=True)),
                ('recieved', models.IntegerField()),
                ('recieved_at', models.DateTimeField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob')),
                ('submitter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_jobsignal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreJobError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('message', models.TextField()),
                ('exception', models.TextField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob')),
            ],
            options={
                'db_table': 'core_joberror',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreJobcron',
            fields=[
                ('created_at', models.DateTimeField()),
                ('interval', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('span', models.PositiveIntegerField()),
                ('server', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'core_jobcron',
                'managed': True,
                'unique_together': {('interval', 'span')},
            },
        ),
        migrations.CreateModel(
            name='CoreImmediateDeliveryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_immediatedeliverylog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreGeocodeQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_geocodequeue',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreFileAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('field_type', models.CharField(max_length=8)),
                ('field_name', models.CharField(max_length=255)),
                ('file_url', models.CharField(max_length=1024)),
                ('bucket', models.CharField(max_length=255)),
                ('directory', models.CharField(max_length=255)),
                ('unique_id', models.CharField(max_length=255)),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.IntegerField()),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_fileattachment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionUserMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('van_id', models.IntegerField()),
                ('created_ea_contact', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_everyactionusermap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionUserFailedSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('reason', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_everyactionuserfailedsync',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionTransactionFailedSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('reason', models.TextField()),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransaction')),
            ],
            options={
                'db_table': 'core_everyactiontransactionfailedsync',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionRestCallLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('method', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('result', models.TextField()),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_everyactionrestcalllog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionOrderFailedSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('reason', models.TextField()),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
            ],
            options={
                'db_table': 'core_everyactionorderfailedsync',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionBulkMappingField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('readonly', models.IntegerField()),
                ('hidden', models.IntegerField()),
                ('column', models.CharField(blank=True, max_length=255, null=True)),
                ('ak_field', models.CharField(blank=True, max_length=255, null=True)),
                ('fmt', models.CharField(blank=True, max_length=255, null=True)),
                ('static', models.CharField(blank=True, max_length=255, null=True)),
                ('output', models.IntegerField()),
                ('ord', models.IntegerField()),
                ('mapping', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreeveryactionbulkmapping')),
            ],
            options={
                'db_table': 'core_everyactionbulkmappingfield',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEngagementQueryReportParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreengagementqueryreport')),
            ],
            options={
                'db_table': 'core_engagementqueryreportparam',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEmailWrapperField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreallowedemailwrapperfield')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreemailwrapper')),
            ],
            options={
                'db_table': 'core_emailwrapperfield',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coreemailwrapper',
            name='lang',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage'),
        ),
        migrations.CreateModel(
            name='CoreEmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('from_line', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('template', models.TextField()),
                ('wrapper', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreemailwrapper')),
            ],
            options={
                'db_table': 'core_emailtemplate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationHpcRuleCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('threshold', models.CharField(max_length=10)),
                ('ask', models.CharField(max_length=10)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredonationhpcrule')),
            ],
            options={
                'db_table': 'core_donation_hpc_rule_condition',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDonationChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('change_type', models.CharField(max_length=255)),
                ('new_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
                ('recurring', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorderrecurring')),
                ('staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='staff_donationchangelog', to=settings.AUTH_USER_MODEL)),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransaction')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_donationchangelog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDeliveryError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('subject', models.TextField()),
                ('body', models.TextField()),
                ('reason', models.CharField(max_length=255)),
                ('delivery_type', models.CharField(max_length=255)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_deliveryerror',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDefaultExcludeQueryParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredefaultexcludequery')),
            ],
            options={
                'db_table': 'core_defaultexcludequeryparam',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreDatabaseAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('username', models.CharField(max_length=32, unique=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('auth_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_databaseaccount',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCwcRetryQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('retry_count', models.IntegerField()),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_cwcretryqueue',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCwcDeliveryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('cwc_delivery_id', models.CharField(blank=True, max_length=255, null=True)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_cwcdeliverylog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCwcAvailableTargets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('office_code', models.CharField(blank=True, max_length=5, null=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_cwcavailabletargets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreClientSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('entity', models.CharField(max_length=255)),
                ('attribute', models.CharField(max_length=255)),
                ('value', models.TextField()),
            ],
            options={
                'db_table': 'core_clientsetting',
                'managed': True,
                'unique_together': {('entity', 'attribute')},
            },
        ),
        migrations.AddField(
            model_name='coreclickurl',
            name='page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage'),
        ),
        migrations.CreateModel(
            name='CoreBoundary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('geometry', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_boundary',
                'managed': True,
                'unique_together': {('group_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='CoreBounceSoft',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('action_id', models.IntegerField(blank=True, null=True)),
                ('bounce_class', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_bounce_soft',
                'managed': True,
                'unique_together': {('user_id', 'action_id'), ('user_id', 'mailing_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreBounce',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('mailing_id', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField()),
                ('action_id', models.IntegerField(blank=True, null=True)),
                ('bounce_type', models.CharField(blank=True, max_length=6, null=True)),
                ('bounce_class', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'core_bounce',
                'managed': True,
                'unique_together': {('user_id', 'action_id'), ('user_id', 'mailing_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreBlockedEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('code', models.SmallIntegerField()),
                ('timestamp', models.DateTimeField()),
            ],
            options={
                'db_table': 'core_blocked_email',
                'managed': True,
                'unique_together': {('mailing_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreBatchDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('message', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('from_line', models.TextField(blank=True, null=True)),
                ('recent_signatures', models.IntegerField()),
                ('recent_since', models.DateTimeField()),
                ('delivered', models.IntegerField()),
                ('traceback', models.TextField(blank=True, null=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_batchdelivery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAdminLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ip_address', models.CharField(blank=True, max_length=15, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('user_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuseragent')),
            ],
            options={
                'db_table': 'core_adminlocation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreActionNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('to', models.TextField(blank=True, null=True)),
                ('custom_from', models.CharField(max_length=255)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('from_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corefromline')),
                ('wrapper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreemailwrapper')),
            ],
            options={
                'db_table': 'core_actionnotification',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreActionField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreaction')),
            ],
            options={
                'db_table': 'core_actionfield',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coreaction',
            name='mailing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing'),
        ),
        migrations.AddField(
            model_name='coreaction',
            name='page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage'),
        ),
        migrations.AddField(
            model_name='coreaction',
            name='referring_mailing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='referred_action', to='mydsa.coremailing'),
        ),
        migrations.AddField(
            model_name='coreaction',
            name='referring_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='referred_action', to='mydsa.coreuser'),
        ),
        migrations.AddField(
            model_name='coreaction',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser'),
        ),
        migrations.AddField(
            model_name='coreaction',
            name='useragent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuseragent'),
        ),
        migrations.CreateModel(
            name='CmsWhipcountForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('client_hosted', models.IntegerField()),
                ('client_url', models.CharField(max_length=255)),
                ('introduction_text', models.TextField()),
                ('script_text', models.TextField()),
                ('survey_question_text', models.TextField()),
                ('results_source', models.CharField(max_length=255)),
                ('minimum_response_agreement', models.DecimalField(decimal_places=2, max_digits=3)),
                ('minimum_calls', models.IntegerField()),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_whipcount_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsUserFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('form_id', models.PositiveIntegerField()),
                ('type', models.CharField(max_length=8)),
                ('label', models.TextField()),
                ('field_name', models.CharField(max_length=96)),
                ('input', models.CharField(max_length=16)),
                ('alternatives', models.TextField()),
                ('html', models.TextField()),
                ('status', models.CharField(max_length=8)),
                ('ordering', models.IntegerField()),
                ('options_json', models.TextField()),
                ('form_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'cms_user_form_field',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsUnsubscribeForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('introduction_text', models.TextField()),
                ('survey_question_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_unsubscribe_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsTemplatesetField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmsallowedtemplatesetfield')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_templatesetfield',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='cmstemplateset',
            name='lang',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage'),
        ),
        migrations.CreateModel(
            name='CmsTemplateHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('filename', models.CharField(max_length=255)),
                ('code_hash', models.CharField(max_length=64)),
                ('user_name', models.CharField(blank=True, max_length=64, null=True)),
                ('edit_type', models.CharField(blank=True, max_length=64, null=True)),
                ('github_sha', models.CharField(blank=True, max_length=255, null=True)),
                ('github_message', models.TextField(blank=True, null=True)),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_templatehistory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsSurveyQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('question_label', models.TextField()),
                ('question_html', models.TextField()),
                ('ordering', models.IntegerField(blank=True, null=True)),
                ('field_type', models.CharField(blank=True, max_length=16, null=True)),
                ('field_name', models.CharField(blank=True, max_length=255, null=True)),
                ('alternatives', models.TextField(blank=True, null=True)),
                ('options_json', models.TextField(blank=True, null=True)),
                ('is_required', models.IntegerField(blank=True, null=True)),
                ('survey_form', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmssurveyform')),
            ],
            options={
                'db_table': 'cms_survey_question',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='cmssurveyform',
            name='page',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage'),
        ),
        migrations.AddField(
            model_name='cmssurveyform',
            name='templateset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset'),
        ),
        migrations.CreateModel(
            name='CmsSignupForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('introduction_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_signup_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsRecurringDonationUpdateForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('update_card_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_recurringdonationupdate_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsRecurringDonationCancelForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('please_stay_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_recurringdonationcancel_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsPetitionForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('statement_leadin', models.TextField()),
                ('statement_text', models.TextField()),
                ('about_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_petition_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsLteForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('client_hosted', models.IntegerField()),
                ('client_url', models.CharField(max_length=255)),
                ('introduction_text', models.TextField()),
                ('talking_points', models.TextField()),
                ('writing_tips', models.TextField()),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_lte_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsLetterForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('statement_leadin', models.TextField()),
                ('letter_text', models.TextField()),
                ('about_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_letter_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsGithubRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('owner', models.CharField(max_length=255)),
                ('repos', models.CharField(max_length=255)),
                ('private', models.IntegerField()),
                ('public_key', models.TextField(blank=True, null=True)),
                ('private_key', models.TextField(blank=True, null=True)),
                ('webhook', models.CharField(blank=True, max_length=255, null=True)),
                ('deploy_key', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'cms_githubrepository',
                'managed': True,
                'unique_together': {('owner', 'repos')},
            },
        ),
        migrations.CreateModel(
            name='CmsGithubEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('body', models.TextField()),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corejob')),
                ('repository', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmsgithubrepository')),
            ],
            options={
                'db_table': 'cms_githubevent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsGithubConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('path', models.CharField(max_length=255)),
                ('live_branch', models.CharField(max_length=255)),
                ('preview_branch', models.CharField(max_length=255)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmsgithubrepository')),
                ('templateset', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_githubconnection',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsEventSignupForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('ground_rules', models.TextField()),
                ('search_page_text', models.TextField()),
                ('signup_text', models.TextField()),
                ('custom_field_html', models.TextField()),
                ('tools_text', models.TextField()),
                ('tools_sidebar', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_event_signup_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsEventModerateForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('client_hosted', models.IntegerField()),
                ('client_url', models.CharField(max_length=255)),
                ('custom_field_html', models.TextField()),
                ('tools_text', models.TextField()),
                ('tools_sidebar', models.TextField()),
                ('host_tools_sidebar', models.TextField()),
                ('search_page_text', models.TextField()),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_event_moderate_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsEventCreateForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('ground_rules', models.TextField()),
                ('host_requirements', models.TextField()),
                ('host_text', models.TextField()),
                ('custom_field_html', models.TextField()),
                ('tools_text', models.TextField()),
                ('tools_sidebar', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_event_create_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsDonationForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('ask_text', models.TextField()),
                ('is_recurring', models.IntegerField()),
                ('show_other_amount', models.IntegerField()),
                ('amount_order', models.CharField(max_length=255)),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_donation_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsDonationAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('amount', models.CharField(max_length=20)),
                ('is_default', models.IntegerField(blank=True, null=True)),
                ('donation_form', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmsdonationform')),
            ],
            options={
                'db_table': 'cms_donationamount',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsCannedLetter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=80)),
                ('letter_text', models.TextField()),
                ('lte_form', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmslteform')),
            ],
            options={
                'db_table': 'cms_cannedletter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsCampaignVolunteerForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('client_hosted', models.IntegerField()),
                ('client_url', models.CharField(max_length=255)),
                ('ground_rules', models.TextField()),
                ('volunteer_text', models.TextField()),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_campaign_volunteer_form',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CmsCallForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('thank_you_text', models.TextField()),
                ('introduction_text', models.TextField()),
                ('script_text', models.TextField()),
                ('survey_question_text', models.TextField()),
                ('client_hosted', models.IntegerField(blank=True, null=True)),
                ('client_url', models.CharField(blank=True, max_length=255, null=True)),
                ('page', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_call_form',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='textingtargetingqueryreport',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport'),
        ),
        migrations.CreateModel(
            name='TextingSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textinglist')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingsubscriber')),
            ],
            options={
                'db_table': 'texting_subscription',
                'managed': True,
                'unique_together': {('subscriber', 'list')},
            },
        ),
        migrations.CreateModel(
            name='TextingSavedTextQueryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_id', models.IntegerField(blank=True, null=True)),
                ('action', models.CharField(max_length=255)),
                ('reason', models.CharField(max_length=255)),
                ('targeting_version', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='log_message', to='mydsa.textingbroadcast')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='log_triggered', to='mydsa.textingbroadcast')),
            ],
            options={
                'db_table': 'texting_savedtextquerylog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingSavedQueryTimeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sql', models.TextField()),
                ('time', models.FloatField()),
                ('created_at', models.DateTimeField()),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbroadcast')),
            ],
            options={
                'db_table': 'texting_savedquerytimelog',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingWasMonthlyDonor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
                ('recurringdonortargetingoption', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corerecurringdonortargetingoption')),
            ],
            options={
                'db_table': 'texting_messagetargeting_was_monthly_donor',
                'managed': True,
                'unique_together': {('messagetargeting', 'recurringdonortargetingoption')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'texting_messagetargeting_users',
                'managed': True,
                'unique_together': {('messagetargeting', 'user')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
                ('usergroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreusergroup')),
            ],
            options={
                'db_table': 'texting_messagetargeting_user_groups',
                'managed': True,
                'unique_together': {('messagetargeting', 'usergroup')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingTextLists',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textinglist')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_text_lists',
                'managed': True,
                'unique_together': {('messagetargeting', 'list')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
                ('targetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetgroup')),
            ],
            options={
                'db_table': 'texting_messagetargeting_target_groups',
                'managed': True,
                'unique_together': {('messagetargeting', 'targetgroup')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'texting_messagetargeting_tags',
                'managed': True,
                'unique_together': {('messagetargeting', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_messages',
                'managed': True,
                'unique_together': {('messagetargeting', 'message')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingMailings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_mailings',
                'managed': True,
                'unique_together': {('messagetargeting', 'mailing')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingLists',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelist')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_lists',
                'managed': True,
                'unique_together': {('messagetargeting', 'list')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_languages',
                'managed': True,
                'unique_together': {('messagetargeting', 'language')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingCampaigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_campaigns',
                'managed': True,
                'unique_together': {('messagetargeting', 'campaign')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingBoundaryGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boundarygroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreboundarygroup')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
            ],
            options={
                'db_table': 'texting_messagetargeting_boundary_groups',
                'managed': True,
                'unique_together': {('messagetargeting', 'boundarygroup')},
            },
        ),
        migrations.CreateModel(
            name='TextingMessageTargetingActions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('messagetargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessagetargeting')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'texting_messagetargeting_actions',
                'managed': True,
                'unique_together': {('messagetargeting', 'page')},
            },
        ),
        migrations.AddField(
            model_name='textingmessagetargeting',
            name='message',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbroadcast'),
        ),
        migrations.CreateModel(
            name='TextingMessageTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'texting_message_tags',
                'managed': True,
                'unique_together': {('message', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TextingMergeQueryParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('name', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbroadcast')),
            ],
            options={
                'db_table': 'texting_mergequeryparam',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TextingBindingOriginators',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('binding', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbinding')),
                ('originator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingoriginator')),
            ],
            options={
                'db_table': 'texting_binding_originators',
                'managed': True,
                'unique_together': {('binding', 'originator')},
            },
        ),
        migrations.CreateModel(
            name='TextingAdminReplyMessage',
            fields=[
                ('message_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.textingmessage')),
                ('change_subscription_status', models.CharField(blank=True, max_length=32, null=True)),
                ('admin_user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'texting_adminreplymessage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SummaryMailingVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('variation_id', models.IntegerField(blank=True, null=True)),
                ('letter', models.CharField(blank=True, max_length=2, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('recipients', models.IntegerField()),
                ('opens', models.IntegerField()),
                ('raw_opens', models.IntegerField()),
                ('total_opens', models.IntegerField()),
                ('total_raw_opens', models.IntegerField()),
                ('clicks', models.IntegerField()),
                ('raw_clicks', models.IntegerField()),
                ('total_clicks', models.IntegerField()),
                ('total_raw_clicks', models.IntegerField()),
                ('actions', models.IntegerField()),
                ('orders', models.IntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount_converted', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unsubscribes', models.IntegerField()),
                ('bounces', models.IntegerField()),
                ('complaints', models.IntegerField()),
                ('total_unsubscribes', models.IntegerField()),
                ('new_users', models.IntegerField()),
                ('bounces_all', models.IntegerField()),
                ('delays', models.IntegerField()),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'summary_mailingvariation',
                'managed': True,
                'unique_together': {('mailing', 'variation_id')},
            },
        ),
        migrations.CreateModel(
            name='ReportsReportCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsreport')),
                ('reportcategory', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsreportcategory')),
            ],
            options={
                'db_table': 'reports_report_categories',
                'managed': True,
                'unique_together': {('report', 'reportcategory')},
            },
        ),
        migrations.CreateModel(
            name='ReportsCachedQueryResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('sql', models.TextField()),
                ('params', models.TextField()),
                ('cache_table', models.CharField(max_length=255)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport')),
            ],
            options={
                'db_table': 'reports_cachedqueryresult',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OneClickStoredUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('fastaction_id', models.CharField(max_length=64)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'oneclick_storeduser',
                'managed': True,
                'unique_together': {('user', 'fastaction_id')},
            },
        ),
        migrations.CreateModel(
            name='LabTestTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtag')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
            ],
            options={
                'db_table': 'lab_test_tags',
                'managed': True,
                'unique_together': {('test', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='LabTestPageTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pagetype', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labpagetype')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
            ],
            options={
                'db_table': 'lab_test_page_types',
                'managed': True,
                'unique_together': {('test', 'pagetype')},
            },
        ),
        migrations.CreateModel(
            name='LabTestPages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
            ],
            options={
                'db_table': 'lab_test_pages',
                'managed': True,
                'unique_together': {('test', 'page')},
            },
        ),
        migrations.CreateModel(
            name='LabTestCustomFields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowedpagefield', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreallowedpagefield')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.labtest')),
            ],
            options={
                'db_table': 'lab_test_custom_fields',
                'managed': True,
                'unique_together': {('test', 'allowedpagefield')},
            },
        ),
        migrations.CreateModel(
            name='EventsEmailLogToUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emaillog', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventsemaillog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'events_emaillog_to_users',
                'managed': True,
                'unique_together': {('emaillog', 'user')},
            },
        ),
        migrations.CreateModel(
            name='EventsCampaignAlsoSearchCampaigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='campaigns_from', to='mydsa.eventscampaign')),
                ('to_campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='campaigns_to', to='mydsa.eventscampaign')),
            ],
            options={
                'db_table': 'events_campaign_also_search_campaigns',
                'managed': True,
                'unique_together': {('from_campaign', 'to_campaign')},
            },
        ),
        migrations.CreateModel(
            name='CoreWhipcountActionCalled',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('response', models.CharField(max_length=255)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('whipcountaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corewhipcountaction')),
            ],
            options={
                'db_table': 'core_whipcountactioncalled',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreUserMergeUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('usermerge', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreusermerge')),
            ],
            options={
                'db_table': 'core_usermerge_users',
                'managed': True,
                'unique_together': {('usermerge', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreUserMailing',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingsubject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_usermailing',
                'managed': True,
                'unique_together': {('mailing', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('usergroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreusergroup')),
            ],
            options={
                'db_table': 'core_user_groups',
                'managed': True,
                'unique_together': {('user', 'usergroup')},
            },
        ),
        migrations.CreateModel(
            name='CoreUserDivision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('division_id', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_userdivision',
                'managed': True,
                'unique_together': {('user', 'division_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreTransactionalMailingTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
                ('transactionalmailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransactionalmailing')),
            ],
            options={
                'db_table': 'core_transactionalmailing_tags',
                'managed': True,
                'unique_together': {('transactionalmailing', 'tag')},
            },
        ),
        migrations.AddField(
            model_name='coretargetingqueryreport',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport'),
        ),
        migrations.CreateModel(
            name='CoreSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_subscription',
                'managed': True,
                'unique_together': {('user', 'list')},
            },
        ),
        migrations.CreateModel(
            name='CoreSpecialTargetGroup',
            fields=[
                ('targetgroup_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretargetgroup')),
                ('jurisdiction', models.CharField(max_length=50)),
                ('custom_boundaries', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreboundarygroup')),
            ],
            options={
                'db_table': 'core_specialtargetgroup',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSpecialTarget',
            fields=[
                ('target_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretarget')),
                ('boundary_id', models.IntegerField(blank=True, null=True)),
                ('body', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corespecialtargetgroup')),
            ],
            options={
                'db_table': 'core_specialtarget',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceUserMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('salesforce_id', models.CharField(max_length=18)),
                ('match_type', models.CharField(max_length=255)),
                ('created_ak_user', models.IntegerField()),
                ('created_sf_user', models.IntegerField()),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('id_match', models.IntegerField(blank=True, null=True)),
                ('email_match', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_salesforceusermap',
                'managed': True,
                'unique_together': {('user', 'salesforce_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceTransactionMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('salesforce_id', models.CharField(max_length=18)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransaction')),
            ],
            options={
                'db_table': 'core_salesforcetransactionmap',
                'managed': True,
                'unique_together': {('transaction', 'salesforce_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreSalesforceOrderMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('salesforce_id', models.CharField(max_length=18)),
                ('origin', models.CharField(max_length=2)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
            ],
            options={
                'db_table': 'core_salesforceordermap',
                'managed': True,
                'unique_together': {('order', 'salesforce_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreProductTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreproduct')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'core_product_tags',
                'managed': True,
                'unique_together': {('product', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='CorePolTarget',
            fields=[
                ('target_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretarget')),
                ('body_id', models.CharField(max_length=255)),
                ('person_id', models.CharField(max_length=255)),
                ('division_id', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'core_poltarget',
                'managed': True,
                'unique_together': {('body_id', 'person_id')},
            },
        ),
        migrations.CreateModel(
            name='CorePhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.CharField(max_length=25)),
                ('phone', models.CharField(max_length=25)),
                ('source', models.CharField(max_length=25)),
                ('normalized_phone', models.CharField(max_length=25)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_phone',
                'managed': True,
                'unique_together': {('user', 'type', 'source')},
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryJobTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetgroup_id', models.IntegerField()),
                ('petitiondeliveryjob', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryjob')),
            ],
            options={
                'db_table': 'core_petitiondeliveryjob_target_groups',
                'managed': True,
                'unique_together': {('petitiondeliveryjob', 'targetgroup_id')},
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryJobPetitions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('petitiondeliveryjob', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryjob')),
            ],
            options={
                'db_table': 'core_petitiondeliveryjob_petitions',
                'managed': True,
                'unique_together': {('petitiondeliveryjob', 'page')},
            },
        ),
        migrations.CreateModel(
            name='CorePetitionDeliveryFileTargets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('petitiondeliveryfile', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitiondeliveryfile')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
            ],
            options={
                'db_table': 'core_petitiondeliveryfile_targets',
                'managed': True,
                'unique_together': {('petitiondeliveryfile', 'target')},
            },
        ),
        migrations.CreateModel(
            name='CorePageVisibleFields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formfield', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreformfield')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_page_visible_fields',
                'managed': True,
                'unique_together': {('page', 'formfield')},
            },
        ),
        migrations.CreateModel(
            name='CorePageTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'core_page_tags',
                'managed': True,
                'unique_together': {('page', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='CorePageRequiredFields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formfield', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreformfield')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_page_required_fields',
                'managed': True,
                'unique_together': {('page', 'formfield')},
            },
        ),
        migrations.CreateModel(
            name='CorePageGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
                ('usergroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreusergroup')),
            ],
            options={
                'db_table': 'core_page_groups',
                'managed': True,
                'unique_together': {('page', 'usergroup')},
            },
        ),
        migrations.CreateModel(
            name='CorePageFollowupPushes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.pushendpoint')),
                ('pagefollowup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepagefollowup')),
            ],
            options={
                'db_table': 'core_pagefollowup_pushes',
                'managed': True,
                'unique_together': {('pagefollowup', 'endpoint')},
            },
        ),
        migrations.CreateModel(
            name='CorePageFollowupNotifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actionnotification', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreactionnotification')),
                ('pagefollowup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepagefollowup')),
            ],
            options={
                'db_table': 'core_pagefollowup_notifications',
                'managed': True,
                'unique_together': {('pagefollowup', 'actionnotification')},
            },
        ),
        migrations.AddField(
            model_name='corepagefollowup',
            name='confirmation_text',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingafteractionmessage'),
        ),
        migrations.AlterUniqueTogether(
            name='coreorder',
            unique_together={('import_id', 'account')},
        ),
        migrations.CreateModel(
            name='CoreNotificationMailing',
            fields=[
                ('transactionalmailing_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coretransactionalmailing')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreactionnotification')),
            ],
            options={
                'db_table': 'core_notificationmailing',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreMailingVariationUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingvariation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingvariation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_mailingvariation_users',
                'managed': True,
                'unique_together': {('mailingvariation', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingWasMonthlyDonor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('recurringdonortargetingoption', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corerecurringdonortargetingoption')),
            ],
            options={
                'db_table': 'core_mailingtargeting_was_monthly_donor',
                'managed': True,
                'unique_together': {('mailingtargeting', 'recurringdonortargetingoption')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_mailingtargeting_users',
                'managed': True,
                'unique_together': {('mailingtargeting', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingtargetingUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('usergroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreusergroup')),
            ],
            options={
                'db_table': 'core_mailingtargeting_user_groups',
                'managed': True,
                'unique_together': {('mailingtargeting', 'usergroup')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('targetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetgroup')),
            ],
            options={
                'db_table': 'core_mailingtargeting_target_groups',
                'managed': True,
                'unique_together': {('mailingtargeting', 'targetgroup')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'core_mailingtargeting_tags',
                'managed': True,
                'unique_together': {('mailingtargeting', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingMessages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingmessage')),
            ],
            options={
                'db_table': 'core_mailingtargeting_messages',
                'managed': True,
                'unique_together': {('mailingtargeting', 'message')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingMailings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_mailings',
                'managed': True,
                'unique_together': {('mailingtargeting', 'mailing')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingMailboxProviderActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailboxprovideractivity', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailboxprovideractivity')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_mailbox_provider_activity',
                'managed': True,
                'unique_together': {('mailingtargeting', 'mailboxprovideractivity')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingLists',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelist')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_lists',
                'managed': True,
                'unique_together': {('mailingtargeting', 'list')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corelanguage')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_languages',
                'managed': True,
                'unique_together': {('mailingtargeting', 'language')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingtargetingCampaigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_campaigns',
                'managed': True,
                'unique_together': {('mailingtargeting', 'campaign')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingBoundaryGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boundarygroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreboundarygroup')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_boundary_groups',
                'managed': True,
                'unique_together': {('mailingtargeting', 'boundarygroup')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingBoundaries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boundary_id', models.IntegerField()),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
            ],
            options={
                'db_table': 'core_mailingtargeting_boundaries',
                'managed': True,
                'unique_together': {('mailingtargeting', 'boundary_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTargetingActions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailingtargeting', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingtargeting')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepage')),
            ],
            options={
                'db_table': 'core_mailingtargeting_actions',
                'managed': True,
                'unique_together': {('mailingtargeting', 'page')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'core_mailing_tags',
                'managed': True,
                'unique_together': {('mailing', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingReviewers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_mailing_reviewers',
                'managed': True,
                'unique_together': {('mailing', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingProofUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
            ],
            options={
                'db_table': 'core_mailing_proof_users',
                'managed': True,
                'unique_together': {('mailing', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreMailingAdditionalTargeting',
            fields=[
                ('mailingtargeting_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coremailingtargeting')),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
            ],
            options={
                'db_table': 'core_mailingadditionaltargeting',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coremailing',
            name='mergequery_report',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport'),
        ),
        migrations.CreateModel(
            name='CoreLtePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('national_newspapers', models.IntegerField()),
                ('regional_newspapers', models.IntegerField()),
                ('local_newspapers', models.IntegerField()),
                ('show_phones', models.IntegerField()),
                ('signature_template', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coresignaturetemplate')),
            ],
            options={
                'db_table': 'core_ltepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreLteAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
                ('subject', models.CharField(max_length=80)),
                ('letter_text', models.TextField()),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremediatarget')),
            ],
            options={
                'db_table': 'core_lteaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreImportPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('subscribe', models.IntegerField(blank=True, null=True)),
                ('default_source', models.CharField(blank=True, max_length=255, null=True)),
                ('unsubscribe_all', models.IntegerField(blank=True, null=True)),
                ('unsubscribe', models.IntegerField(blank=True, null=True)),
                ('custom_privacy_notes', models.TextField()),
                ('subscribe_if_new', models.IntegerField()),
                ('texting_subscribe', models.IntegerField()),
                ('texting_list_id', models.IntegerField(blank=True, null=True)),
                ('texting_match', models.IntegerField()),
                ('texting_match_phone_max_age', models.IntegerField()),
                ('texting_match_name', models.CharField(max_length=20)),
                ('texting_match_location', models.IntegerField()),
                ('privacy_notes', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreprivacynotes')),
            ],
            options={
                'db_table': 'core_importpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreFailedUserMailing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('reason', models.TextField()),
                ('mailing', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailing')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coremailingsubject')),
            ],
            options={
                'db_table': 'core_failedusermailing',
                'managed': True,
                'unique_together': {('mailing', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionTransactionMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('contribution_id', models.IntegerField()),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransaction')),
            ],
            options={
                'db_table': 'core_everyactiontransactionmap',
                'managed': True,
                'unique_together': {('transaction', 'contribution_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionOrderMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('contribution_id', models.IntegerField()),
                ('origin', models.CharField(max_length=2)),
                ('is_recurring', models.IntegerField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
            ],
            options={
                'db_table': 'core_everyactionordermap',
                'managed': True,
                'unique_together': {('order', 'contribution_id')},
            },
        ),
        migrations.CreateModel(
            name='CoreEveryActionMergeQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('sync', models.CharField(max_length=255)),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport')),
            ],
            options={
                'db_table': 'core_everyactionmergequery',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEventSignupPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
            ],
            options={
                'db_table': 'core_eventsignuppage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEventSignupAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
                ('signup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventsignup')),
            ],
            options={
                'db_table': 'core_eventsignupaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEventModeratePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
            ],
            options={
                'db_table': 'core_eventmoderatepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEventModerateAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
                ('approved_event', models.IntegerField()),
                ('deleted_event', models.IntegerField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.event')),
            ],
            options={
                'db_table': 'core_eventmoderateaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEventCreatePage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('campaign_title', models.CharField(blank=True, max_length=255, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
            ],
            options={
                'db_table': 'core_eventcreatepage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreEventCreateAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.event')),
            ],
            options={
                'db_table': 'core_eventcreateaction',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coreengagementqueryreport',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport'),
        ),
        migrations.CreateModel(
            name='CoreDonationHpcRuleExcludeTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('donationhpcrule', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredonationhpcrule')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'core_donation_hpc_rule_exclude_tags',
                'managed': True,
                'unique_together': {('donationhpcrule', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='CoreDonationAttemptLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('accept', models.CharField(max_length=255)),
                ('accept_encoding', models.CharField(max_length=255)),
                ('accept_language', models.CharField(max_length=255)),
                ('accept_charset', models.CharField(max_length=255)),
                ('referrer', models.CharField(max_length=255)),
                ('ip_address', models.CharField(max_length=255)),
                ('user_agent_odd', models.IntegerField()),
                ('user_agent_hash', models.CharField(max_length=255)),
                ('has_session', models.IntegerField()),
                ('args', models.TextField()),
                ('maxmind_score', models.FloatField()),
                ('maxmind_response', models.TextField()),
                ('was_filtered', models.IntegerField()),
                ('filter_name', models.CharField(blank=True, max_length=30, null=True)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorder')),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredonationaction')),
            ],
            options={
                'db_table': 'core_donationattemptlog',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='coredefaultexcludequery',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.reportsqueryreport'),
        ),
        migrations.CreateModel(
            name='CoreCandidateTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecandidate')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretag')),
            ],
            options={
                'db_table': 'core_candidate_tags',
                'managed': True,
                'unique_together': {('candidate', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='CoreCampaignVolunteerPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.corepage')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
            ],
            options={
                'db_table': 'core_campaignvolunteerpage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreCampaignVolunteerAction',
            fields=[
                ('action_ptr', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mydsa.coreaction')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaign')),
                ('volunteer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.eventscampaignvolunteer')),
            ],
            options={
                'db_table': 'core_campaignvolunteeraction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CoreAdminPrefs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('ordering', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_adminprefs',
                'managed': True,
                'unique_together': {('user', 'content_type')},
            },
        ),
        migrations.CreateModel(
            name='CoreActionNotificationToStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actionnotification', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreactionnotification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_actionnotification_to_staff',
                'managed': True,
                'unique_together': {('actionnotification', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreActBlueTransactionDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('sequence', models.IntegerField()),
                ('lineitem_id', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=10)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amount_converted', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('currency', models.CharField(blank=True, max_length=3, null=True)),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecandidate')),
                ('detail', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreorderdetail')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretransaction')),
            ],
            options={
                'db_table': 'core_actbluetransactiondetail',
                'managed': True,
                'unique_together': {('lineitem_id', 'type')},
            },
        ),
        migrations.CreateModel(
            name='CmsWhipcountResponseOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('stance', models.CharField(max_length=255)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('whipcount_form', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmswhipcountform')),
            ],
            options={
                'db_table': 'cms_whipcountresponseoverride',
                'managed': True,
                'unique_together': {('whipcount_form', 'target', 'stance')},
            },
        ),
        migrations.CreateModel(
            name='CmsTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('filename', models.CharField(max_length=255)),
                ('code', models.TextField()),
                ('code_hash', models.CharField(max_length=64)),
                ('templateset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.cmstemplateset')),
            ],
            options={
                'db_table': 'cms_template',
                'managed': True,
                'unique_together': {('templateset', 'filename')},
            },
        ),
        migrations.CreateModel(
            name='TextingBroadcastReviewers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('broadcast', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbroadcast')),
            ],
            options={
                'db_table': 'texting_broadcast_reviewers',
                'managed': True,
                'unique_together': {('broadcast', 'user')},
            },
        ),
        migrations.CreateModel(
            name='TextingBroadcastProofUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreuser')),
                ('broadcast', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.textingbroadcast')),
            ],
            options={
                'db_table': 'texting_broadcast_proof_users',
                'managed': True,
                'unique_together': {('broadcast', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CoreWhipcountPageTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetgroup')),
                ('whipcountpage', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corewhipcountpage')),
            ],
            options={
                'db_table': 'core_whipcountpage_target_groups',
                'managed': True,
                'unique_together': {('whipcountpage', 'targetgroup')},
            },
        ),
        migrations.CreateModel(
            name='CorePetitionPageTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetgroup')),
                ('petitionpage', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitionpage')),
            ],
            options={
                'db_table': 'core_petitionpage_target_groups',
                'managed': True,
                'unique_together': {('petitionpage', 'targetgroup')},
            },
        ),
        migrations.CreateModel(
            name='CorePetitionActionTargeted',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('petitionaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corepetitionaction')),
            ],
            options={
                'db_table': 'core_petitionaction_targeted',
                'managed': True,
                'unique_together': {('petitionaction', 'target')},
            },
        ),
        migrations.CreateModel(
            name='CoreLetterPageTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetgroup')),
                ('letterpage', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreletterpage')),
            ],
            options={
                'db_table': 'core_letterpage_target_groups',
                'managed': True,
                'unique_together': {('letterpage', 'targetgroup')},
            },
        ),
        migrations.CreateModel(
            name='CoreLetterActionTargeted',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('letteraction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreletteraction')),
            ],
            options={
                'db_table': 'core_letteraction_targeted',
                'managed': True,
                'unique_together': {('letteraction', 'target')},
            },
        ),
        migrations.CreateModel(
            name='CoreDonationpageProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coreproduct')),
                ('donationpage', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredonationpage')),
            ],
            options={
                'db_table': 'core_donationpage_products',
                'managed': True,
                'unique_together': {('donationpage', 'product')},
            },
        ),
        migrations.CreateModel(
            name='CoreDonationpageCandidates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecandidate')),
                ('donationpage', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coredonationpage')),
            ],
            options={
                'db_table': 'core_donationpage_candidates',
                'managed': True,
                'unique_together': {('donationpage', 'candidate')},
            },
        ),
        migrations.CreateModel(
            name='CoreCongressTargetGroupTargets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('congresstargetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecongresstargetgroup')),
            ],
            options={
                'db_table': 'core_congresstargetgroup_targets',
                'managed': True,
                'unique_together': {('congresstargetgroup', 'target')},
            },
        ),
        migrations.CreateModel(
            name='CoreCongressTargetGroupExcludes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('congresstargetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecongresstargetgroup')),
            ],
            options={
                'db_table': 'core_congresstargetgroup_excludes',
                'managed': True,
                'unique_together': {('congresstargetgroup', 'target')},
            },
        ),
        migrations.CreateModel(
            name='CoreCallPageTargetGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetgroup', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetgroup')),
                ('callpage', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecallpage')),
            ],
            options={
                'db_table': 'core_callpage_target_groups',
                'managed': True,
                'unique_together': {('callpage', 'targetgroup')},
            },
        ),
        migrations.CreateModel(
            name='CoreCallActionTargeted',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('callaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecallaction')),
            ],
            options={
                'db_table': 'core_callaction_targeted',
                'managed': True,
                'unique_together': {('callaction', 'target')},
            },
        ),
        migrations.CreateModel(
            name='CoreCallActionLocalOfficeChecked',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetoffice', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretargetoffice')),
                ('callaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecallaction')),
            ],
            options={
                'db_table': 'core_callaction_local_office_checked',
                'managed': True,
                'unique_together': {('callaction', 'targetoffice')},
            },
        ),
        migrations.CreateModel(
            name='CoreCallActionChecked',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.coretarget')),
                ('callaction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mydsa.corecallaction')),
            ],
            options={
                'db_table': 'core_callaction_checked',
                'managed': True,
                'unique_together': {('callaction', 'target')},
            },
        ),
    ]
